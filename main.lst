CCS PCH C Compiler, Version 4.057, 8241               13-mai-13 23:10

               Filename: main.lst

               ROM used: 6534 bytes (20%)
                         Largest free fragment is 26234
               RAM used: 21 (1%) at main() level
                         54 (4%) worst case
               Stack:    4 locations

*
0000:  GOTO   18D6
.................... #include <18f452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(clock=20000000) 
*
04A2:  CLRF   FEA
04A4:  MOVLW  15
04A6:  MOVWF  FE9
04A8:  MOVF   FEF,W
04AA:  BZ    04C6
04AC:  MOVLW  06
04AE:  MOVWF  01
04B0:  CLRF   00
04B2:  DECFSZ 00,F
04B4:  BRA    04B2
04B6:  DECFSZ 01,F
04B8:  BRA    04B0
04BA:  MOVLW  7B
04BC:  MOVWF  00
04BE:  DECFSZ 00,F
04C0:  BRA    04BE
04C2:  DECFSZ FEF,F
04C4:  BRA    04AC
04C6:  RETLW  00
04C8:  MOVLW  03
04CA:  SUBWF  15,F
04CC:  BNC   04E0
04CE:  CLRF   FEA
04D0:  MOVLW  15
04D2:  MOVWF  FE9
04D4:  MOVF   FEF,W
04D6:  BZ    04E0
04D8:  BRA    04DC
04DA:  BRA    04DC
04DC:  DECFSZ FEF,F
04DE:  BRA    04DA
04E0:  RETLW  00
.................... #fuses HS,NOWDT,PUT 
.................... #include <lcd_generico.c> 
.................... /* 
....................  
.................... Função para utilização do display LCD para qualquer tamanho 
....................  
....................    inic_display();                        função para configurar e inicializar o display 
....................    display(char tipo,char dado);          função para enviar um comando ou um dado para o display 
....................    mostra(char dado);                     funçao para enviar um dado para o display 
....................  
....................    Configuração dos pinos do microcontrolador 
....................  
....................    RB0 = enable display 
....................    RB1 = RS 
....................    RB2 = RW 
....................    RB3 = 
....................    RB4 = DB4 
....................    RB5 = DB5 
....................    RB6 = DB6 
....................    RB7 = DB7 
....................  
....................    Primeira linha = 0x80 
....................    Segunda  linha = 0xC0 
....................    Terceira linha = 0xA0 
....................    Quarta linha   = 0xE0 
....................  
.................... Aprimorado por Cleber Toss Hoffmann 
.................... cleber.toss.hoffmann@gmail.com 
....................  
.................... */ 
.................... // 
.................... #byte PORTB=0xF81 
.................... #byte TRISB=0xF93 
....................  
.................... //Constantes 
.................... #define set_bit0 0x01 
.................... #define set_bit1 0x02 
.................... #define set_bit2 0x04 
....................  
.................... #define clear_bit0 0xfe 
.................... #define clear_bit1 0xfd 
.................... #define clear_bit2 0xfb 
....................  
.................... void inic_display(); 
....................  
.................... #separate 
.................... void display(char tipo,char dado); 
....................  
.................... #separate 
.................... void mostra(char dado); 
....................  
.................... void inic_display() 
.................... { 
....................  TRISB =0x00; 
*
055E:  CLRF   F93
....................  delay_ms(50); 
0560:  MOVLW  32
0562:  MOVWF  15
0564:  RCALL  04A2
....................  
....................  PORTB  = 0x30; 
0566:  MOVLW  30
0568:  MOVWF  F81
....................  PORTB |= set_bit0; 
056A:  BSF    F81.0
....................  delay_us(5); 
056C:  MOVLW  08
056E:  MOVWF  00
0570:  DECFSZ 00,F
0572:  BRA    0570
....................  PORTB &= clear_bit0; 
0574:  BCF    F81.0
....................  delay_ms(25); 
0576:  MOVLW  19
0578:  MOVWF  15
057A:  RCALL  04A2
....................  
....................  PORTB = 0x30; 
057C:  MOVLW  30
057E:  MOVWF  F81
....................  PORTB |= set_bit0; 
0580:  BSF    F81.0
....................  delay_us(5); 
0582:  MOVLW  08
0584:  MOVWF  00
0586:  DECFSZ 00,F
0588:  BRA    0586
....................  PORTB &= clear_bit0; 
058A:  BCF    F81.0
....................  delay_ms(25); 
058C:  MOVLW  19
058E:  MOVWF  15
0590:  RCALL  04A2
....................  
....................  PORTB = 0x30; 
0592:  MOVLW  30
0594:  MOVWF  F81
....................  PORTB |= set_bit0; 
0596:  BSF    F81.0
....................  delay_us(5); 
0598:  MOVLW  08
059A:  MOVWF  00
059C:  DECFSZ 00,F
059E:  BRA    059C
....................  PORTB &= clear_bit0; 
05A0:  BCF    F81.0
....................  delay_ms(25); 
05A2:  MOVLW  19
05A4:  MOVWF  15
05A6:  RCALL  04A2
....................  
....................  PORTB = 0x30; 
05A8:  MOVLW  30
05AA:  MOVWF  F81
....................  PORTB |= set_bit0; 
05AC:  BSF    F81.0
....................  delay_us(5); 
05AE:  MOVLW  08
05B0:  MOVWF  00
05B2:  DECFSZ 00,F
05B4:  BRA    05B2
....................  PORTB &= clear_bit0; 
05B6:  BCF    F81.0
....................  
....................  delay_us(200); 
05B8:  MOVLW  C8
05BA:  MOVWF  15
05BC:  RCALL  04C8
....................  PORTB = 0x20; 
05BE:  MOVLW  20
05C0:  MOVWF  F81
....................  PORTB |= set_bit0; 
05C2:  BSF    F81.0
....................  delay_us(5); 
05C4:  MOVLW  08
05C6:  MOVWF  00
05C8:  DECFSZ 00,F
05CA:  BRA    05C8
....................  PORTB &= clear_bit0; 
05CC:  BCF    F81.0
....................  
....................  delay_us(200); 
05CE:  MOVLW  C8
05D0:  MOVWF  15
05D2:  RCALL  04C8
....................  display(0,0x28); 
05D4:  CLRF   2A
05D6:  MOVLW  28
05D8:  MOVWF  2B
05DA:  RCALL  04E2
....................  display(0,0x08); 
05DC:  CLRF   2A
05DE:  MOVLW  08
05E0:  MOVWF  2B
05E2:  RCALL  04E2
....................  display(0,0x01); 
05E4:  CLRF   2A
05E6:  MOVLW  01
05E8:  MOVWF  2B
05EA:  RCALL  04E2
....................  delay_ms(5); 
05EC:  MOVLW  05
05EE:  MOVWF  15
05F0:  RCALL  04A2
....................  display(0,0x06); 
05F2:  CLRF   2A
05F4:  MOVLW  06
05F6:  MOVWF  2B
05F8:  RCALL  04E2
....................  display(0,0x0c); 
05FA:  CLRF   2A
05FC:  MOVLW  0C
05FE:  MOVWF  2B
0600:  RCALL  04E2
....................  
.................... } 
0602:  GOTO   1924 (RETURN)
....................  
....................  
.................... /* display 
....................    Envia um dado para o display. 
....................    Se tipo=0, é um comando (RS=0) 
....................    Se tipo=1, é um dado (RS=1) 
.................... */ 
.................... #separate 
.................... void display(char tipo,char dado) 
.................... { 
....................  char temp; 
....................  if(tipo == true) 
*
04E2:  DECFSZ 2A,W
04E4:  BRA    0526
....................     { 
....................      temp=(dado & 0xf0) | set_bit1; 
04E6:  MOVF   2B,W
04E8:  ANDLW  F0
04EA:  IORLW  02
04EC:  MOVWF  2C
....................      PORTB = temp; 
04EE:  MOVFF  2C,F81
....................      PORTB |= set_bit0; 
04F2:  BSF    F81.0
....................      delay_us(5); 
04F4:  MOVLW  08
04F6:  MOVWF  00
04F8:  DECFSZ 00,F
04FA:  BRA    04F8
....................      PORTB &= clear_bit0; 
04FC:  BCF    F81.0
.................... //   delay_us(50); 
....................      temp=(dado << 4) | set_bit1; 
04FE:  SWAPF  2B,W
0500:  MOVWF  00
0502:  MOVLW  F0
0504:  ANDWF  00,F
0506:  MOVF   00,W
0508:  IORLW  02
050A:  MOVWF  2C
....................      PORTB = temp; 
050C:  MOVFF  2C,F81
....................      PORTB |= set_bit0; 
0510:  BSF    F81.0
....................      delay_us(5); 
0512:  MOVLW  08
0514:  MOVWF  00
0516:  DECFSZ 00,F
0518:  BRA    0516
....................      PORTB &= clear_bit0; 
051A:  BCF    F81.0
....................      delay_us(50); 
051C:  MOVLW  53
051E:  MOVWF  00
0520:  DECFSZ 00,F
0522:  BRA    0520
....................  
....................     } 
....................  else 
0524:  BRA    055C
....................     { 
....................      temp=(dado & 0xf0); 
0526:  MOVF   2B,W
0528:  ANDLW  F0
052A:  MOVWF  2C
....................      PORTB = temp; 
052C:  MOVFF  2C,F81
....................      PORTB |= set_bit0; 
0530:  BSF    F81.0
....................      delay_us(5); 
0532:  MOVLW  08
0534:  MOVWF  00
0536:  DECFSZ 00,F
0538:  BRA    0536
....................      PORTB &= clear_bit0; 
053A:  BCF    F81.0
.................... //   delay_us(50); 
....................      temp=(dado << 4); 
053C:  SWAPF  2B,W
053E:  MOVWF  2C
0540:  MOVLW  F0
0542:  ANDWF  2C,F
....................      PORTB = temp; 
0544:  MOVFF  2C,F81
....................      PORTB |= set_bit0; 
0548:  BSF    F81.0
....................      delay_us(5); 
054A:  MOVLW  08
054C:  MOVWF  00
054E:  DECFSZ 00,F
0550:  BRA    054E
....................      PORTB &= clear_bit0; 
0552:  BCF    F81.0
....................      delay_us(50); 
0554:  MOVLW  53
0556:  MOVWF  00
0558:  DECFSZ 00,F
055A:  BRA    0558
....................     } 
....................  
.................... } 
055C:  RETLW  00
....................  
.................... #separate 
.................... void mostra(char dado) 
.................... { 
....................  display(1,dado); 
*
0BCC:  MOVLW  01
0BCE:  MOVWF  2A
0BD0:  MOVFF  29,2B
0BD4:  RCALL  04E2
.................... } 
0BD6:  RETLW  00
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #IF !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #ENDIF 
....................  
.................... #IF defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #ENDIF 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #IF defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    int8  data1,data2; 
....................    #endif 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #IF !defined(__PCD__) 
....................      *((unsigned int8 *)(&y)) = 0x7E;  
.................... #ENDIF 
....................  
.................... #IF defined(__PCD__) // Takes care of IEEE format 
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
.................... #ENDIF 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #IF !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #ENDIF 
.................... #IF defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
.................... #ENDIF 
....................  
....................       if (n<0) 
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int8  data1,data2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int8  data1,data2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
....................  
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................   
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int8 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................    data1--; 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(___PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int8 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................    data1--; 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................       (*p)--; 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "ds1307.c" 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... ///                               DS1307.C                                   ///  
.................... ///                     Driver for Real Time Clock                           ///  
.................... ///                                                                          ///  
.................... /// ds1307_init() - Enable oscillator without clearing the seconds register -///  
.................... ///                 used when PIC loses power and DS1307 run from 3V BAT     ///  
.................... ///               - Disable squarewave output                                ///  
.................... ///                                                                          ///  
.................... /// ds1307_set_date_time(day,mth,year,dow,hour,min,sec)  Set the date/time   ///  
.................... ///                                                                          ///  
.................... /// ds1307_get_date(day,mth,year,dow)               Get the date             ///  
.................... ///                                                                          ///  
.................... /// ds1307_get_time(hr,min,sec)                     Get the time             ///  
.................... ///                                                                          ///  
.................... ////////////////////////////////////////////////////////////////////////////////  
....................  
.................... #define RTC_SDA  PIN_C4  
.................... #define RTC_SCL  PIN_C3  
....................  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL)  
*
024E:  MOVLW  08
0250:  MOVWF  01
0252:  MOVLW  05
0254:  MOVWF  00
0256:  DECFSZ 00,F
0258:  BRA    0256
025A:  BCF    F8B.3
025C:  BCF    F94.3
025E:  MOVLW  06
0260:  MOVWF  00
0262:  DECFSZ 00,F
0264:  BRA    0262
0266:  RLCF   1D,F
0268:  BCF    F8B.4
026A:  BTFSC  FD8.0
026C:  BSF    F94.4
026E:  BTFSS  FD8.0
0270:  BCF    F94.4
0272:  BSF    F94.3
0274:  BTFSS  F82.3
0276:  BRA    0274
0278:  DECFSZ 01,F
027A:  BRA    0252
027C:  MOVLW  05
027E:  MOVWF  00
0280:  DECFSZ 00,F
0282:  BRA    0280
0284:  BCF    F8B.3
0286:  BCF    F94.3
0288:  NOP   
028A:  BSF    F94.4
028C:  MOVLW  06
028E:  MOVWF  00
0290:  DECFSZ 00,F
0292:  BRA    0290
0294:  MOVLW  06
0296:  MOVWF  00
0298:  DECFSZ 00,F
029A:  BRA    0298
029C:  BSF    F94.3
029E:  BTFSS  F82.3
02A0:  BRA    029E
02A2:  CLRF   01
02A4:  MOVLW  06
02A6:  MOVWF  00
02A8:  DECFSZ 00,F
02AA:  BRA    02A8
02AC:  BTFSC  F82.4
02AE:  BSF    01.0
02B0:  BCF    F8B.3
02B2:  BCF    F94.3
02B4:  BCF    F8B.4
02B6:  BCF    F94.4
02B8:  RETLW  00
02BA:  MOVLW  08
02BC:  MOVWF  1A
02BE:  MOVFF  00,1B
02C2:  BSF    F94.4
02C4:  MOVLW  06
02C6:  MOVWF  00
02C8:  DECFSZ 00,F
02CA:  BRA    02C8
02CC:  BSF    F94.3
02CE:  BTFSS  F82.3
02D0:  BRA    02CE
02D2:  BTFSC  F82.4
02D4:  BSF    FD8.0
02D6:  BTFSS  F82.4
02D8:  BCF    FD8.0
02DA:  RLCF   01,F
02DC:  MOVLW  05
02DE:  MOVWF  00
02E0:  DECFSZ 00,F
02E2:  BRA    02E0
02E4:  BCF    F94.3
02E6:  BCF    F8B.3
02E8:  DECFSZ 1A,F
02EA:  BRA    02C2
02EC:  BSF    F94.4
02EE:  MOVLW  06
02F0:  MOVWF  00
02F2:  DECFSZ 00,F
02F4:  BRA    02F2
02F6:  BCF    F8B.4
02F8:  MOVF   1B,W
02FA:  BTFSS  FD8.2
02FC:  BCF    F94.4
02FE:  NOP   
0300:  BSF    F94.3
0302:  BTFSS  F82.3
0304:  BRA    0302
0306:  MOVLW  05
0308:  MOVWF  00
030A:  DECFSZ 00,F
030C:  BRA    030A
030E:  BCF    F8B.3
0310:  BCF    F94.3
0312:  MOVLW  06
0314:  MOVWF  00
0316:  DECFSZ 00,F
0318:  BRA    0316
031A:  BCF    F8B.4
031C:  BCF    F94.4
031E:  RETLW  00
....................  
.................... BYTE bin2bcd(BYTE binary_value);  
.................... BYTE bcd2bin(BYTE bcd_value);  
....................  
.................... void ds1307_init(void)  
.................... {  
....................    BYTE seconds = 0;  
*
036A:  CLRF   15
....................  
....................    i2c_start();  
036C:  BSF    F94.4
036E:  MOVLW  05
0370:  MOVWF  00
0372:  DECFSZ 00,F
0374:  BRA    0372
0376:  BSF    F94.3
0378:  MOVLW  06
037A:  MOVWF  00
037C:  DECFSZ 00,F
037E:  BRA    037C
0380:  BCF    F8B.4
0382:  BCF    F94.4
0384:  MOVLW  05
0386:  MOVWF  00
0388:  DECFSZ 00,F
038A:  BRA    0388
038C:  BCF    F8B.3
038E:  BCF    F94.3
....................    i2c_write(0xD0);      // WR to RTC  
0390:  MOVLW  D0
0392:  MOVWF  1D
0394:  RCALL  024E
....................    i2c_write(0x00);      // REG 0  
0396:  CLRF   1D
0398:  RCALL  024E
....................    i2c_start();  
039A:  BSF    F94.4
039C:  MOVLW  05
039E:  MOVWF  00
03A0:  DECFSZ 00,F
03A2:  BRA    03A0
03A4:  BSF    F94.3
03A6:  MOVLW  06
03A8:  MOVWF  00
03AA:  DECFSZ 00,F
03AC:  BRA    03AA
03AE:  BTFSS  F82.3
03B0:  BRA    03AE
03B2:  BCF    F8B.4
03B4:  BCF    F94.4
03B6:  MOVLW  05
03B8:  MOVWF  00
03BA:  DECFSZ 00,F
03BC:  BRA    03BA
03BE:  BCF    F8B.3
03C0:  BCF    F94.3
....................    i2c_write(0xD1);      // RD from RTC  
03C2:  MOVLW  D1
03C4:  MOVWF  1D
03C6:  RCALL  024E
....................    seconds = bcd2bin(i2c_read(0)); // Read current "seconds" in DS1307  
03C8:  CLRF   00
03CA:  RCALL  02BA
03CC:  MOVFF  01,16
03D0:  MOVFF  01,1B
03D4:  RCALL  0320
03D6:  MOVFF  01,15
....................    i2c_stop();  
03DA:  BCF    F94.4
03DC:  NOP   
03DE:  BSF    F94.3
03E0:  BTFSS  F82.3
03E2:  BRA    03E0
03E4:  MOVLW  05
03E6:  MOVWF  00
03E8:  DECFSZ 00,F
03EA:  BRA    03E8
03EC:  BRA    03EE
03EE:  NOP   
03F0:  BSF    F94.4
03F2:  MOVLW  05
03F4:  MOVWF  00
03F6:  DECFSZ 00,F
03F8:  BRA    03F6
....................    seconds &= 0x7F;  
03FA:  BCF    15.7
....................  
....................    delay_us(3);  
03FC:  MOVLW  04
03FE:  MOVWF  00
0400:  DECFSZ 00,F
0402:  BRA    0400
0404:  BRA    0406
....................  
....................    i2c_start();  
0406:  BSF    F94.4
0408:  MOVLW  05
040A:  MOVWF  00
040C:  DECFSZ 00,F
040E:  BRA    040C
0410:  BSF    F94.3
0412:  MOVLW  06
0414:  MOVWF  00
0416:  DECFSZ 00,F
0418:  BRA    0416
041A:  BCF    F8B.4
041C:  BCF    F94.4
041E:  MOVLW  05
0420:  MOVWF  00
0422:  DECFSZ 00,F
0424:  BRA    0422
0426:  BCF    F8B.3
0428:  BCF    F94.3
....................    i2c_write(0xD0);      // WR to RTC  
042A:  MOVLW  D0
042C:  MOVWF  1D
042E:  RCALL  024E
....................    i2c_write(0x00);      // REG 0  
0430:  CLRF   1D
0432:  RCALL  024E
....................    i2c_write(bin2bcd(seconds));     // Start oscillator with current "seconds value  
0434:  MOVFF  15,1C
0438:  RCALL  0346
043A:  MOVFF  01,16
043E:  MOVFF  01,1D
0442:  RCALL  024E
....................    i2c_start();  
0444:  BSF    F94.4
0446:  MOVLW  05
0448:  MOVWF  00
044A:  DECFSZ 00,F
044C:  BRA    044A
044E:  BSF    F94.3
0450:  MOVLW  06
0452:  MOVWF  00
0454:  DECFSZ 00,F
0456:  BRA    0454
0458:  BTFSS  F82.3
045A:  BRA    0458
045C:  BCF    F8B.4
045E:  BCF    F94.4
0460:  MOVLW  05
0462:  MOVWF  00
0464:  DECFSZ 00,F
0466:  BRA    0464
0468:  BCF    F8B.3
046A:  BCF    F94.3
....................    i2c_write(0xD0);      // WR to RTC  
046C:  MOVLW  D0
046E:  MOVWF  1D
0470:  RCALL  024E
....................    i2c_write(0x07);      // Control Register  
0472:  MOVLW  07
0474:  MOVWF  1D
0476:  RCALL  024E
....................    i2c_write(0x80);     // Disable squarewave output pin  
0478:  MOVLW  80
047A:  MOVWF  1D
047C:  RCALL  024E
....................    i2c_stop();  
047E:  BCF    F94.4
0480:  NOP   
0482:  BSF    F94.3
0484:  BTFSS  F82.3
0486:  BRA    0484
0488:  MOVLW  05
048A:  MOVWF  00
048C:  DECFSZ 00,F
048E:  BRA    048C
0490:  BRA    0492
0492:  NOP   
0494:  BSF    F94.4
0496:  MOVLW  05
0498:  MOVWF  00
049A:  DECFSZ 00,F
049C:  BRA    049A
....................  
.................... }  
049E:  GOTO   18F8 (RETURN)
....................  
.................... void ds1307_set_date_time(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min, BYTE sec)  
.................... {  
....................   sec &= 0x7F;  
*
13A8:  BCF    1B.7
....................   hr &= 0x3F;  
13AA:  MOVLW  3F
13AC:  ANDWF  19,F
....................  
....................   i2c_start();  
13AE:  BSF    F94.4
13B0:  MOVLW  05
13B2:  MOVWF  00
13B4:  DECFSZ 00,F
13B6:  BRA    13B4
13B8:  BSF    F94.3
13BA:  MOVLW  06
13BC:  MOVWF  00
13BE:  DECFSZ 00,F
13C0:  BRA    13BE
13C2:  BCF    F8B.4
13C4:  BCF    F94.4
13C6:  MOVLW  05
13C8:  MOVWF  00
13CA:  DECFSZ 00,F
13CC:  BRA    13CA
13CE:  BCF    F8B.3
13D0:  BCF    F94.3
....................   i2c_write(0xD0);            // I2C write address  
13D2:  MOVLW  D0
13D4:  MOVWF  1D
13D6:  CALL   024E
....................   i2c_write(0x00);            // Start at REG 0 - Seconds  
13DA:  CLRF   1D
13DC:  CALL   024E
....................   i2c_write(bin2bcd(sec));      // REG 0  
13E0:  MOVFF  1B,1C
13E4:  CALL   0346
13E8:  MOVFF  01,1C
13EC:  MOVFF  01,1D
13F0:  CALL   024E
....................   i2c_write(bin2bcd(min));      // REG 1  
13F4:  MOVFF  1A,1C
13F8:  CALL   0346
13FC:  MOVFF  01,1C
1400:  MOVFF  01,1D
1404:  CALL   024E
....................   i2c_write(bin2bcd(hr));      // REG 2  
1408:  MOVFF  19,1C
140C:  CALL   0346
1410:  MOVFF  01,1C
1414:  MOVFF  01,1D
1418:  CALL   024E
....................   i2c_write(bin2bcd(dow));      // REG 3  
141C:  MOVFF  18,1C
1420:  CALL   0346
1424:  MOVFF  01,1C
1428:  MOVFF  01,1D
142C:  CALL   024E
....................   i2c_write(bin2bcd(day));      // REG 4  
1430:  MOVFF  15,1C
1434:  CALL   0346
1438:  MOVFF  01,1C
143C:  MOVFF  01,1D
1440:  CALL   024E
....................   i2c_write(bin2bcd(mth));      // REG 5  
1444:  MOVFF  16,1C
1448:  CALL   0346
144C:  MOVFF  01,1C
1450:  MOVFF  01,1D
1454:  CALL   024E
....................   i2c_write(bin2bcd(year));      // REG 6  
1458:  MOVFF  17,1C
145C:  CALL   0346
1460:  MOVFF  01,1C
1464:  MOVFF  01,1D
1468:  CALL   024E
....................   i2c_write(0x80);            // REG 7 - Disable squarewave output pin  
146C:  MOVLW  80
146E:  MOVWF  1D
1470:  CALL   024E
....................   i2c_stop();  
1474:  BCF    F94.4
1476:  NOP   
1478:  BSF    F94.3
147A:  BTFSS  F82.3
147C:  BRA    147A
147E:  MOVLW  05
1480:  MOVWF  00
1482:  DECFSZ 00,F
1484:  BRA    1482
1486:  BRA    1488
1488:  NOP   
148A:  BSF    F94.4
148C:  MOVLW  05
148E:  MOVWF  00
1490:  DECFSZ 00,F
1492:  BRA    1490
.................... }  
1494:  GOTO   1896 (RETURN)
....................  
.................... void ds1307_get_date(BYTE &day, BYTE &mth, BYTE &year, BYTE &dow)  
.................... {  
....................   i2c_start();  
*
06A0:  BSF    F94.4
06A2:  MOVLW  05
06A4:  MOVWF  00
06A6:  DECFSZ 00,F
06A8:  BRA    06A6
06AA:  BSF    F94.3
06AC:  MOVLW  06
06AE:  MOVWF  00
06B0:  DECFSZ 00,F
06B2:  BRA    06B0
06B4:  BCF    F8B.4
06B6:  BCF    F94.4
06B8:  MOVLW  05
06BA:  MOVWF  00
06BC:  DECFSZ 00,F
06BE:  BRA    06BC
06C0:  BCF    F8B.3
06C2:  BCF    F94.3
....................   i2c_write(0xD0);  
06C4:  MOVLW  D0
06C6:  MOVWF  1D
06C8:  RCALL  024E
....................   i2c_write(0x03);            // Start at REG 3 - Day of week  
06CA:  MOVLW  03
06CC:  MOVWF  1D
06CE:  RCALL  024E
....................   i2c_start();  
06D0:  BSF    F94.4
06D2:  MOVLW  05
06D4:  MOVWF  00
06D6:  DECFSZ 00,F
06D8:  BRA    06D6
06DA:  BSF    F94.3
06DC:  MOVLW  06
06DE:  MOVWF  00
06E0:  DECFSZ 00,F
06E2:  BRA    06E0
06E4:  BTFSS  F82.3
06E6:  BRA    06E4
06E8:  BCF    F8B.4
06EA:  BCF    F94.4
06EC:  MOVLW  05
06EE:  MOVWF  00
06F0:  DECFSZ 00,F
06F2:  BRA    06F0
06F4:  BCF    F8B.3
06F6:  BCF    F94.3
....................   i2c_write(0xD1);  
06F8:  MOVLW  D1
06FA:  MOVWF  1D
06FC:  RCALL  024E
....................   dow  = bcd2bin(i2c_read() & 0x7f);   // REG 3  
06FE:  MOVLW  01
0700:  MOVWF  00
0702:  RCALL  02BA
0704:  MOVF   01,W
0706:  ANDLW  7F
0708:  MOVWF  16
070A:  MOVWF  1B
070C:  RCALL  0320
070E:  MOVFF  01,0B
....................   day  = bcd2bin(i2c_read() & 0x3f);   // REG 4  
0712:  MOVLW  01
0714:  MOVWF  00
0716:  RCALL  02BA
0718:  MOVF   01,W
071A:  ANDLW  3F
071C:  MOVWF  16
071E:  MOVWF  1B
0720:  RCALL  0320
0722:  MOVFF  01,08
....................   mth  = bcd2bin(i2c_read() & 0x1f);   // REG 5  
0726:  MOVLW  01
0728:  MOVWF  00
072A:  RCALL  02BA
072C:  MOVF   01,W
072E:  ANDLW  1F
0730:  MOVWF  16
0732:  MOVWF  1B
0734:  RCALL  0320
0736:  MOVFF  01,09
....................   year = bcd2bin(i2c_read(0));            // REG 6  
073A:  CLRF   00
073C:  RCALL  02BA
073E:  MOVFF  01,15
0742:  MOVFF  01,1B
0746:  RCALL  0320
0748:  MOVFF  01,0A
....................   i2c_stop();  
074C:  BCF    F94.4
074E:  NOP   
0750:  BSF    F94.3
0752:  BTFSS  F82.3
0754:  BRA    0752
0756:  MOVLW  05
0758:  MOVWF  00
075A:  DECFSZ 00,F
075C:  BRA    075A
075E:  BRA    0760
0760:  NOP   
0762:  BSF    F94.4
0764:  MOVLW  05
0766:  MOVWF  00
0768:  DECFSZ 00,F
076A:  BRA    0768
.................... }  
....................  
.................... void ds1307_get_time(BYTE &hr, BYTE &min, BYTE &sec)  
.................... {  
....................   i2c_start();  
076C:  BSF    F94.4
076E:  MOVLW  05
0770:  MOVWF  00
0772:  DECFSZ 00,F
0774:  BRA    0772
0776:  BSF    F94.3
0778:  MOVLW  06
077A:  MOVWF  00
077C:  DECFSZ 00,F
077E:  BRA    077C
0780:  BCF    F8B.4
0782:  BCF    F94.4
0784:  MOVLW  05
0786:  MOVWF  00
0788:  DECFSZ 00,F
078A:  BRA    0788
078C:  BCF    F8B.3
078E:  BCF    F94.3
....................   i2c_write(0xD0);  
0790:  MOVLW  D0
0792:  MOVWF  1D
0794:  RCALL  024E
....................   i2c_write(0x00);            // Start at REG 0 - Seconds  
0796:  CLRF   1D
0798:  RCALL  024E
....................   i2c_start();  
079A:  BSF    F94.4
079C:  MOVLW  05
079E:  MOVWF  00
07A0:  DECFSZ 00,F
07A2:  BRA    07A0
07A4:  BSF    F94.3
07A6:  MOVLW  06
07A8:  MOVWF  00
07AA:  DECFSZ 00,F
07AC:  BRA    07AA
07AE:  BTFSS  F82.3
07B0:  BRA    07AE
07B2:  BCF    F8B.4
07B4:  BCF    F94.4
07B6:  MOVLW  05
07B8:  MOVWF  00
07BA:  DECFSZ 00,F
07BC:  BRA    07BA
07BE:  BCF    F8B.3
07C0:  BCF    F94.3
....................   i2c_write(0xD1);  
07C2:  MOVLW  D1
07C4:  MOVWF  1D
07C6:  RCALL  024E
....................   sec = bcd2bin(i2c_read() & 0x7f);  
07C8:  MOVLW  01
07CA:  MOVWF  00
07CC:  RCALL  02BA
07CE:  MOVF   01,W
07D0:  ANDLW  7F
07D2:  MOVWF  16
07D4:  MOVWF  1B
07D6:  RCALL  0320
07D8:  MOVFF  01,05
....................   min = bcd2bin(i2c_read() & 0x7f);  
07DC:  MOVLW  01
07DE:  MOVWF  00
07E0:  RCALL  02BA
07E2:  MOVF   01,W
07E4:  ANDLW  7F
07E6:  MOVWF  16
07E8:  MOVWF  1B
07EA:  RCALL  0320
07EC:  MOVFF  01,06
....................   hr  = bcd2bin(i2c_read(0) & 0x3f);  
07F0:  CLRF   00
07F2:  RCALL  02BA
07F4:  MOVF   01,W
07F6:  ANDLW  3F
07F8:  MOVWF  16
07FA:  MOVWF  1B
07FC:  RCALL  0320
07FE:  MOVFF  01,07
....................   i2c_stop();  
0802:  BCF    F94.4
0804:  NOP   
0806:  BSF    F94.3
0808:  BTFSS  F82.3
080A:  BRA    0808
080C:  MOVLW  05
080E:  MOVWF  00
0810:  DECFSZ 00,F
0812:  BRA    0810
0814:  BRA    0816
0816:  NOP   
0818:  BSF    F94.4
081A:  MOVLW  05
081C:  MOVWF  00
081E:  DECFSZ 00,F
0820:  BRA    081E
....................  
.................... }  
....................  
.................... BYTE bin2bcd(BYTE binary_value)  
.................... {  
....................   BYTE temp;  
....................   BYTE retval;  
....................  
....................   temp = binary_value;  
*
0346:  MOVFF  1C,1D
....................   retval = 0;  
034A:  CLRF   1E
....................  
....................   while(1)  
....................   {  
....................     // Get the tens digit by doing multiple subtraction  
....................     // of 10 from the binary value.  
....................     if(temp >= 10)  
034C:  MOVF   1D,W
034E:  SUBLW  09
0350:  BC    035C
....................     {  
....................       temp -= 10;  
0352:  MOVLW  0A
0354:  SUBWF  1D,F
....................       retval += 0x10;  
0356:  MOVLW  10
0358:  ADDWF  1E,F
....................     }  
....................     else // Get the ones digit by adding the remainder.  
035A:  BRA    0362
....................     {  
....................       retval += temp;  
035C:  MOVF   1D,W
035E:  ADDWF  1E,F
....................       break;  
0360:  BRA    0364
....................     }  
....................   }  
0362:  BRA    034C
....................  
....................   return(retval);  
0364:  MOVFF  1E,01
.................... }  
0368:  RETLW  00
....................  
....................  
.................... // Input range - 00 to 99.  
.................... BYTE bcd2bin(BYTE bcd_value)  
.................... {  
....................   BYTE temp;  
....................  
....................   temp = bcd_value;  
*
0320:  MOVFF  1B,1C
....................   // Shifting upper digit right by 1 is same as multiplying by 8.  
....................   temp >>= 1;  
0324:  BCF    FD8.0
0326:  RRCF   1C,F
....................   // Isolate the bits for the upper digit.  
....................   temp &= 0x78;  
0328:  MOVLW  78
032A:  ANDWF  1C,F
....................  
....................   // Now return: (Tens * 8) + (Tens * 2) + Ones  
....................  
....................   return(temp + (temp >> 2) + (bcd_value & 0x0f));  
032C:  RRCF   1C,W
032E:  MOVWF  00
0330:  RRCF   00,F
0332:  MOVLW  3F
0334:  ANDWF  00,F
0336:  MOVF   00,W
0338:  ADDWF  1C,W
033A:  MOVWF  1D
033C:  MOVF   1B,W
033E:  ANDLW  0F
0340:  ADDWF  1D,W
0342:  MOVWF  01
.................... }  
0344:  RETLW  00
....................  
.................... //------------------------------------------------------------------------ 
.................... // Read one byte at the specified address. 
.................... // This function is used to access the control byte 
.................... // or the NVRAM bytes. 
....................  
.................... char ds1307_read_byte(char addr) 
.................... { 
.................... char retval; 
....................  
.................... disable_interrupts(GLOBAL); 
*
0606:  BCF    FF2.6
0608:  BCF    FF2.7
060A:  BTFSC  FF2.7
060C:  BRA    0608
.................... i2c_start(); 
060E:  BSF    F94.4
0610:  MOVLW  05
0612:  MOVWF  00
0614:  DECFSZ 00,F
0616:  BRA    0614
0618:  BSF    F94.3
061A:  MOVLW  06
061C:  MOVWF  00
061E:  DECFSZ 00,F
0620:  BRA    061E
0622:  BCF    F8B.4
0624:  BCF    F94.4
0626:  MOVLW  05
0628:  MOVWF  00
062A:  DECFSZ 00,F
062C:  BRA    062A
062E:  BCF    F8B.3
0630:  BCF    F94.3
.................... i2c_write(0xD0); 
0632:  MOVLW  D0
0634:  MOVWF  1D
0636:  RCALL  024E
.................... i2c_write(addr); 
0638:  MOVFF  15,1D
063C:  RCALL  024E
....................  
.................... i2c_start(); 
063E:  BSF    F94.4
0640:  MOVLW  05
0642:  MOVWF  00
0644:  DECFSZ 00,F
0646:  BRA    0644
0648:  BSF    F94.3
064A:  MOVLW  06
064C:  MOVWF  00
064E:  DECFSZ 00,F
0650:  BRA    064E
0652:  BTFSS  F82.3
0654:  BRA    0652
0656:  BCF    F8B.4
0658:  BCF    F94.4
065A:  MOVLW  05
065C:  MOVWF  00
065E:  DECFSZ 00,F
0660:  BRA    065E
0662:  BCF    F8B.3
0664:  BCF    F94.3
.................... i2c_write(0xD1); 
0666:  MOVLW  D1
0668:  MOVWF  1D
066A:  RCALL  024E
.................... retval = i2c_read(0);   // Don't ACK the last byte read 
066C:  CLRF   00
066E:  RCALL  02BA
0670:  MOVFF  01,16
.................... i2c_stop(); 
0674:  BCF    F94.4
0676:  NOP   
0678:  BSF    F94.3
067A:  BTFSS  F82.3
067C:  BRA    067A
067E:  MOVLW  05
0680:  MOVWF  00
0682:  DECFSZ 00,F
0684:  BRA    0682
0686:  BRA    0688
0688:  NOP   
068A:  BSF    F94.4
068C:  MOVLW  05
068E:  MOVWF  00
0690:  DECFSZ 00,F
0692:  BRA    0690
.................... enable_interrupts(GLOBAL); 
0694:  MOVLW  C0
0696:  IORWF  FF2,F
....................  
.................... return(retval); 
0698:  MOVFF  16,01
.................... } 
069C:  GOTO   0826 (RETURN)
....................  
....................  
....................  
.................... #define TECLA_SET    !input(PIN_D0) 
.................... #define TECLA_MAIS   !input(PIN_D3) 
.................... #define TECLA_MENOS  !input(PIN_D2) 
....................  
.................... #define SAIDA01 PIN_D1 
....................  
.................... #define POTENTIAL_DIVIDER_RESISTOR 10000 
.................... #define THERMISTOR_B_VALUE 3977 
.................... #define THERMISTOR_REF_TEMP 298.15 
.................... #define THERMISTOR_REF_RESISTANCE 10000 
....................  
.................... BYTE sec;  
.................... BYTE min;  
.................... BYTE hrs;  
.................... BYTE day;  
.................... BYTE month;  
.................... BYTE yr;  
.................... BYTE dow;  
.................... int temperatura_maxima = 30; 
.................... int tela = 0; //0-Tela principal, 1-Config. Temperatura, 2-Config. Horario 
.................... float temperatura; 
....................  
.................... int histerese = 3; 
....................  
.................... update_clock();  
.................... read_temperature(); 
.................... check_temperature(); 
.................... show_clock(); 
.................... show_temperature(); 
.................... configure_temperature(); 
.................... configure_time(); 
....................  
.................... main() 
.................... {  
*
18D6:  CLRF   FF8
18D8:  BCF    FD0.7
18DA:  CLRF   FEA
18DC:  CLRF   FE9
18DE:  BSF    FC1.0
18E0:  BSF    FC1.1
18E2:  BSF    FC1.2
18E4:  BCF    FC1.3
18E6:  MOVLW  1E
18E8:  MOVWF  0C
18EA:  CLRF   0D
18EC:  MOVLW  03
18EE:  MOVWF  12
18F0:  CLRF   13
18F2:  CLRF   14
.................... ds1307_init();  
18F4:  GOTO   036A
....................  
.................... // Set date for -> 15 June 2005 Tuesday  
.................... // Set time for -> 15:20:55  
.................... //ds1307_set_date_time(18,11,12,2,22,05,55);  
....................  
....................  
....................   setup_adc(ADC_CLOCK_INTERNAL); 
18F8:  BCF    FC1.6
18FA:  BSF    FC2.6
18FC:  BSF    FC2.7
18FE:  BSF    FC1.7
1900:  BSF    FC2.0
.................... //enables the a/d module  
....................   set_adc_channel(0); 
1902:  MOVLW  00
1904:  MOVWF  01
1906:  MOVF   FC2,W
1908:  ANDLW  C7
190A:  IORWF  01,W
190C:  MOVWF  FC2
.................... //the next read_adc call will read channel 0 
....................   delay_us(10); 
190E:  MOVLW  10
1910:  MOVWF  00
1912:  DECFSZ 00,F
1914:  BRA    1912
1916:  NOP   
.................... //a small delay is required after setting the channel 
....................  
.................... //aguarda 100ms 
....................   delay_ms(100); 
1918:  MOVLW  64
191A:  MOVWF  15
191C:  CALL   04A2
....................  
.................... //inicializa o display LCD 
....................   inic_display(); 
1920:  GOTO   055E
....................  
....................   while (true) 
....................   { 
....................  
....................     switch(tela){ 
1924:  MOVF   0D,W
1926:  BZ    1932
1928:  XORLW  01
192A:  BZ    1972
192C:  XORLW  03
192E:  BZ    1978
1930:  BRA    197A
....................       case 0: 
....................         display(0,0x01); 
1932:  CLRF   2A
1934:  MOVLW  01
1936:  MOVWF  2B
1938:  CALL   04E2
....................         update_clock(); 
193C:  GOTO   06A0
....................         read_temperature(); 
1940:  CALL   0EFC
....................         check_temperature(); 
1944:  GOTO   10D0
....................         show_temperature(); 
1948:  GOTO   113C
....................         show_clock(); 
194C:  BRA    1282
....................  
....................         if(TECLA_SET) 
194E:  BSF    F95.0
1950:  BTFSC  F83.0
1952:  BRA    195A
....................           tela = 1; 
1954:  MOVLW  01
1956:  MOVWF  0D
....................         else if(TECLA_MAIS) 
1958:  BRA    1970
195A:  BSF    F95.3
195C:  BTFSC  F83.3
195E:  BRA    1966
....................           tela = 1; 
1960:  MOVLW  01
1962:  MOVWF  0D
....................         else if (TECLA_MENOS) 
1964:  BRA    1970
1966:  BSF    F95.2
1968:  BTFSC  F83.2
196A:  BRA    1970
....................           tela = 2; 
196C:  MOVLW  02
196E:  MOVWF  0D
....................  
....................         break; 
1970:  BRA    197A
....................       case 1: 
....................         read_temperature(); 
1972:  CALL   0EFC
....................         configure_temperature(); 
1976:  BRA    12E8
....................         break; 
....................       case 2: 
....................         //update_clock(); 
....................         configure_time(); 
1978:  BRA    1498
....................         break; 
....................     } 
....................  
.................... //alterna o estado do pino D4 
....................     //output_toggle(PIN_D1); 
....................  
.................... //aguarda 500ms 
....................     delay_ms (200); 
197A:  MOVLW  C8
197C:  MOVWF  15
197E:  CALL   04A2
....................   } 
1982:  BRA    1924
.................... } 
....................  
.................... check_temperature(){ 
....................   if(temperatura < temperatura_maxima - histerese) 
*
10D0:  MOVF   12,W
10D2:  SUBWF  0C,W
10D4:  CLRF   20
10D6:  MOVWF  1F
10D8:  CALL   0838
10DC:  MOVFF  11,18
10E0:  MOVFF  10,17
10E4:  MOVFF  0F,16
10E8:  MOVFF  0E,15
10EC:  MOVFF  03,1C
10F0:  MOVFF  02,1B
10F4:  MOVFF  01,1A
10F8:  MOVFF  00,19
10FC:  RCALL  105A
10FE:  BNC   1106
*
1984:  SLEEP 
....................     output_high(SAIDA01); 
*
1100:  BCF    F95.1
1102:  BSF    F8C.1
....................   else if(temperatura > temperatura_maxima) 
1104:  BRA    1138
1106:  CLRF   20
1108:  MOVFF  0C,1F
110C:  CALL   0838
1110:  MOVFF  03,18
1114:  MOVFF  02,17
1118:  MOVFF  01,16
111C:  MOVFF  00,15
1120:  MOVFF  11,1C
1124:  MOVFF  10,1B
1128:  MOVFF  0F,1A
112C:  MOVFF  0E,19
1130:  RCALL  105A
1132:  BNC   1138
....................     output_low(SAIDA01); 
1134:  BCF    F95.1
1136:  BCF    F8C.1
.................... } 
1138:  GOTO   1948 (RETURN)
....................  
.................... read_temperature() { 
.................... long int adc; 
.................... float formula; 
....................  
....................   adc = read_adc(); 
*
0EFC:  BSF    FC2.2
0EFE:  BTFSC  FC2.2
0F00:  BRA    0EFE
0F02:  MOVFF  FC3,15
0F06:  MOVFF  FC4,16
....................   formula = ((adc - 200) * 0.001 ); 
0F0A:  MOVLW  C8
0F0C:  SUBWF  15,W
0F0E:  MOVWF  1B
0F10:  MOVLW  00
0F12:  SUBWFB 16,W
0F14:  MOVWF  1C
0F16:  MOVWF  20
0F18:  MOVFF  1B,1F
0F1C:  RCALL  0838
0F1E:  MOVFF  03,2C
0F22:  MOVFF  02,2B
0F26:  MOVFF  01,2A
0F2A:  MOVFF  00,29
0F2E:  MOVLW  6F
0F30:  MOVWF  30
0F32:  MOVLW  12
0F34:  MOVWF  2F
0F36:  MOVLW  03
0F38:  MOVWF  2E
0F3A:  MOVLW  75
0F3C:  MOVWF  2D
0F3E:  RCALL  086E
0F40:  MOVFF  03,1A
0F44:  MOVFF  02,19
0F48:  MOVFF  01,18
0F4C:  MOVFF  00,17
....................   temperatura = adc * (0.03 + formula); 
0F50:  BCF    FD8.1
0F52:  MOVLW  8F
0F54:  MOVWF  1E
0F56:  MOVLW  C2
0F58:  MOVWF  1D
0F5A:  MOVLW  75
0F5C:  MOVWF  1C
0F5E:  MOVLW  79
0F60:  MOVWF  1B
0F62:  MOVFF  1A,22
0F66:  MOVFF  19,21
0F6A:  MOVFF  18,20
0F6E:  MOVFF  17,1F
0F72:  BRA    0960
0F74:  MOVFF  00,1B
0F78:  MOVFF  01,1C
0F7C:  MOVFF  02,1D
0F80:  MOVFF  03,1E
0F84:  MOVFF  16,20
0F88:  MOVFF  15,1F
0F8C:  RCALL  0838
0F8E:  MOVFF  03,2C
0F92:  MOVFF  02,2B
0F96:  MOVFF  01,2A
0F9A:  MOVFF  00,29
0F9E:  MOVFF  1E,30
0FA2:  MOVFF  1D,2F
0FA6:  MOVFF  1C,2E
0FAA:  MOVFF  1B,2D
0FAE:  RCALL  086E
0FB0:  MOVFF  03,11
0FB4:  MOVFF  02,10
0FB8:  MOVFF  01,0F
0FBC:  MOVFF  00,0E
....................  
....................   //envia o cursor do LCD para a posicao 0,0 
....................   display(0,0xA0); 
0FC0:  CLRF   2A
0FC2:  MOVLW  A0
0FC4:  MOVWF  2B
0FC6:  CALL   04E2
.................... //imprime na tela a temperatura 
....................   printf(mostra,"ADC: %ld    ",adc); 
0FCA:  CLRF   1B
0FCC:  MOVF   1B,W
0FCE:  CALL   0004
0FD2:  INCF   1B,F
0FD4:  MOVWF  00
0FD6:  MOVWF  29
0FD8:  RCALL  0BCC
0FDA:  MOVLW  05
0FDC:  SUBWF  1B,W
0FDE:  BNZ   0FCC
0FE0:  MOVLW  10
0FE2:  MOVWF  FE9
0FE4:  MOVFF  16,1D
0FE8:  MOVFF  15,1C
0FEC:  BRA    0BD8
0FEE:  MOVLW  08
0FF0:  MOVWF  1C
0FF2:  MOVF   1C,W
0FF4:  CALL   0004
0FF8:  INCF   1C,F
0FFA:  MOVWF  00
0FFC:  MOVWF  29
0FFE:  RCALL  0BCC
1000:  MOVLW  0C
1002:  SUBWF  1C,W
1004:  BNZ   0FF2
....................   //envia o cursor do LCD para a posicao 0,0 
....................   display(0,0xD0); 
1006:  CLRF   2A
1008:  MOVLW  D0
100A:  MOVWF  2B
100C:  CALL   04E2
.................... //imprime na tela a temperatura 
....................   printf(mostra,"form: %f    ",formula); 
1010:  CLRF   1B
1012:  MOVF   1B,W
1014:  CALL   0022
1018:  INCF   1B,F
101A:  MOVWF  00
101C:  MOVWF  29
101E:  RCALL  0BCC
1020:  MOVLW  06
1022:  SUBWF  1B,W
1024:  BNZ   1012
1026:  MOVLW  89
1028:  MOVWF  FE9
102A:  MOVFF  1A,1F
102E:  MOVFF  19,1E
1032:  MOVFF  18,1D
1036:  MOVFF  17,1C
103A:  MOVLW  02
103C:  MOVWF  20
103E:  RCALL  0D7E
1040:  MOVLW  08
1042:  MOVWF  1C
1044:  MOVF   1C,W
1046:  CALL   0022
104A:  INCF   1C,F
104C:  MOVWF  00
104E:  MOVWF  29
1050:  RCALL  0BCC
1052:  MOVLW  0C
1054:  SUBWF  1C,W
1056:  BNZ   1044
....................    
.................... } 
1058:  RETLW  00
....................  
....................  
.................... show_temperature(){ 
.................... //envia o cursor do LCD para a posicao 0,0 
....................   display(0,0x80); 
*
113C:  CLRF   2A
113E:  MOVLW  80
1140:  MOVWF  2B
1142:  CALL   04E2
.................... //imprime na tela a temperatura 
....................   printf(mostra,"Temperatura: %.1lfC    ",temperatura); 
1146:  CLRF   15
1148:  MOVF   15,W
114A:  CALL   0040
114E:  INCF   15,F
1150:  MOVWF  00
1152:  MOVWF  29
1154:  RCALL  0BCC
1156:  MOVLW  0D
1158:  SUBWF  15,W
115A:  BNZ   1148
115C:  MOVLW  89
115E:  MOVWF  FE9
1160:  MOVFF  11,1F
1164:  MOVFF  10,1E
1168:  MOVFF  0F,1D
116C:  MOVFF  0E,1C
1170:  MOVLW  01
1172:  MOVWF  20
1174:  RCALL  0D7E
1176:  MOVLW  12
1178:  MOVWF  16
117A:  MOVF   16,W
117C:  CALL   0040
1180:  INCF   16,F
1182:  MOVWF  00
1184:  MOVWF  29
1186:  RCALL  0BCC
1188:  MOVLW  17
118A:  SUBWF  16,W
118C:  BNZ   117A
.................... } 
118E:  GOTO   194C (RETURN)
....................  
.................... update_clock(){ 
....................  
....................   ds1307_get_date(day,month,yr,dow);  
....................   ds1307_get_time(hrs,min,sec);  
....................  
....................   sec = ds1307_read_byte(0); 
*
0822:  CLRF   15
0824:  BRA    0606
0826:  MOVFF  01,05
....................   sec = bcd2bin(sec); 
082A:  MOVFF  05,1B
082E:  RCALL  0320
0830:  MOVFF  01,05
....................  
.................... } 
0834:  GOTO   1940 (RETURN)
....................  
.................... show_clock(){ 
....................  
.................... //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0xC0); 
*
1282:  CLRF   2A
1284:  MOVLW  C0
1286:  MOVWF  2B
1288:  CALL   04E2
....................  
.................... //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"Hora: \%02d:\%02d:\%02d     ", hrs,min,sec);  
128C:  CLRF   15
128E:  MOVF   15,W
1290:  CALL   0068
1294:  INCF   15,F
1296:  MOVWF  00
1298:  MOVWF  29
129A:  RCALL  0BCC
129C:  MOVLW  06
129E:  SUBWF  15,W
12A0:  BNZ   128E
12A2:  MOVFF  07,16
12A6:  MOVLW  01
12A8:  MOVWF  17
12AA:  RCALL  11BA
12AC:  MOVLW  3A
12AE:  MOVWF  29
12B0:  RCALL  0BCC
12B2:  MOVFF  06,16
12B6:  MOVLW  01
12B8:  MOVWF  17
12BA:  RCALL  11BA
12BC:  MOVLW  3A
12BE:  MOVWF  29
12C0:  RCALL  0BCC
12C2:  MOVFF  05,16
12C6:  MOVLW  01
12C8:  MOVWF  17
12CA:  RCALL  11BA
12CC:  MOVLW  14
12CE:  MOVWF  16
12D0:  MOVF   16,W
12D2:  CALL   0068
12D6:  INCF   16,F
12D8:  MOVWF  00
12DA:  MOVWF  29
12DC:  RCALL  0BCC
12DE:  MOVLW  19
12E0:  SUBWF  16,W
12E2:  BNZ   12D0
.................... } 
12E4:  GOTO   194E (RETURN)
....................  
....................  
.................... configure_time() { 
....................   static int state = 0; 
....................  
....................   //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0x80); 
*
1498:  CLRF   2A
149A:  MOVLW  80
149C:  MOVWF  2B
149E:  CALL   04E2
....................   //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"Config Relogio    "); 
14A2:  CLRF   15
14A4:  MOVF   15,W
14A6:  CALL   0092
14AA:  INCF   15,F
14AC:  MOVWF  00
14AE:  MOVWF  29
14B0:  CALL   0BCC
14B4:  MOVLW  12
14B6:  SUBWF  15,W
14B8:  BNZ   14A4
....................  
....................   //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0xC0); 
14BA:  CLRF   2A
14BC:  MOVLW  C0
14BE:  MOVWF  2B
14C0:  CALL   04E2
....................   //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"H\%02d:\%02d:\%02d D\%02d/\%02d/\%02d    ", hrs,min,sec,day,month,yr);  
14C4:  MOVLW  48
14C6:  MOVWF  29
14C8:  CALL   0BCC
14CC:  MOVFF  07,16
14D0:  MOVLW  01
14D2:  MOVWF  17
14D4:  RCALL  11BA
14D6:  MOVLW  3A
14D8:  MOVWF  29
14DA:  CALL   0BCC
14DE:  MOVFF  06,16
14E2:  MOVLW  01
14E4:  MOVWF  17
14E6:  RCALL  11BA
14E8:  MOVLW  3A
14EA:  MOVWF  29
14EC:  CALL   0BCC
14F0:  MOVFF  05,16
14F4:  MOVLW  01
14F6:  MOVWF  17
14F8:  RCALL  11BA
14FA:  MOVLW  20
14FC:  MOVWF  29
14FE:  CALL   0BCC
1502:  MOVLW  44
1504:  MOVWF  29
1506:  CALL   0BCC
150A:  MOVFF  08,16
150E:  MOVLW  01
1510:  MOVWF  17
1512:  RCALL  11BA
1514:  MOVLW  2F
1516:  MOVWF  29
1518:  CALL   0BCC
151C:  MOVFF  09,16
1520:  MOVLW  01
1522:  MOVWF  17
1524:  RCALL  11BA
1526:  MOVLW  2F
1528:  MOVWF  29
152A:  CALL   0BCC
152E:  MOVFF  0A,16
1532:  MOVLW  01
1534:  MOVWF  17
1536:  RCALL  11BA
1538:  MOVLW  1F
153A:  MOVWF  15
153C:  MOVF   15,W
153E:  CALL   00B6
1542:  INCF   15,F
1544:  MOVWF  00
1546:  MOVWF  29
1548:  CALL   0BCC
154C:  MOVLW  23
154E:  SUBWF  15,W
1550:  BNZ   153C
....................  
....................  
....................   switch(state){ 
1552:  MOVF   13,W
1554:  ADDLW  F8
1556:  BTFSC  FD8.0
1558:  BRA    18A8
155A:  ADDLW  08
155C:  GOTO   18AC
....................     case 0: //menu superior 
....................       if(TECLA_SET) 
1560:  BSF    F95.0
1562:  BTFSC  F83.0
1564:  BRA    156C
....................         state = 1; 
1566:  MOVLW  01
1568:  MOVWF  13
....................       else if(TECLA_MAIS) 
156A:  BRA    1580
156C:  BSF    F95.3
156E:  BTFSC  F83.3
1570:  BRA    1576
....................         tela = 0; 
1572:  CLRF   0D
....................       else if(TECLA_MENOS) 
1574:  BRA    1580
1576:  BSF    F95.2
1578:  BTFSC  F83.2
157A:  BRA    1580
....................         tela = 1; 
157C:  MOVLW  01
157E:  MOVWF  0D
....................       break; 
1580:  BRA    18A8
....................  
....................     case 1: //hora 
....................       display(0,0xC0); 
1582:  CLRF   2A
1584:  MOVLW  C0
1586:  MOVWF  2B
1588:  CALL   04E2
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Horas:\%02d            ", hrs); 
158C:  CLRF   15
158E:  MOVF   15,W
1590:  CALL   00EA
1594:  INCF   15,F
1596:  MOVWF  00
1598:  MOVWF  29
159A:  CALL   0BCC
159E:  MOVLW  06
15A0:  SUBWF  15,W
15A2:  BNZ   158E
15A4:  MOVFF  07,16
15A8:  MOVLW  01
15AA:  MOVWF  17
15AC:  RCALL  11BA
15AE:  MOVLW  0A
15B0:  MOVWF  16
15B2:  MOVF   16,W
15B4:  CALL   00EA
15B8:  INCF   16,F
15BA:  MOVWF  00
15BC:  MOVWF  29
15BE:  CALL   0BCC
15C2:  MOVLW  16
15C4:  SUBWF  16,W
15C6:  BNZ   15B2
....................       if(TECLA_SET) 
15C8:  BSF    F95.0
15CA:  BTFSC  F83.0
15CC:  BRA    15D4
....................         state = 2; 
15CE:  MOVLW  02
15D0:  MOVWF  13
....................       else if(TECLA_MAIS){ 
15D2:  BRA    15F8
15D4:  BSF    F95.3
15D6:  BTFSC  F83.3
15D8:  BRA    15E6
....................         hrs++; 
15DA:  INCF   07,F
....................         if(hrs > 23) 
15DC:  MOVF   07,W
15DE:  SUBLW  17
15E0:  BC    15E4
....................           hrs = 0; 
15E2:  CLRF   07
....................       } 
....................       else if(TECLA_MENOS){ 
15E4:  BRA    15F8
15E6:  BSF    F95.2
15E8:  BTFSC  F83.2
15EA:  BRA    15F8
....................         hrs--; 
15EC:  DECF   07,F
....................         if(hrs == -1) 
15EE:  MOVF   07,W
15F0:  SUBLW  FF
15F2:  BNZ   15F8
....................           hrs = 23; 
15F4:  MOVLW  17
15F6:  MOVWF  07
....................       } 
....................       break; 
15F8:  BRA    18A8
....................     case 2: //minuto 
....................       display(0,0xC0); 
15FA:  CLRF   2A
15FC:  MOVLW  C0
15FE:  MOVWF  2B
1600:  CALL   04E2
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Minutos:\%02d         ", min); 
1604:  CLRF   15
1606:  MOVF   15,W
1608:  CALL   0112
160C:  INCF   15,F
160E:  MOVWF  00
1610:  MOVWF  29
1612:  CALL   0BCC
1616:  MOVLW  08
1618:  SUBWF  15,W
161A:  BNZ   1606
161C:  MOVFF  06,16
1620:  MOVLW  01
1622:  MOVWF  17
1624:  RCALL  11BA
1626:  MOVLW  0C
1628:  MOVWF  16
162A:  MOVF   16,W
162C:  CALL   0112
1630:  INCF   16,F
1632:  MOVWF  00
1634:  MOVWF  29
1636:  CALL   0BCC
163A:  MOVLW  15
163C:  SUBWF  16,W
163E:  BNZ   162A
....................       if(TECLA_SET) 
1640:  BSF    F95.0
1642:  BTFSC  F83.0
1644:  BRA    164C
....................         state = 3; 
1646:  MOVLW  03
1648:  MOVWF  13
....................       else if(TECLA_MAIS){ 
164A:  BRA    1670
164C:  BSF    F95.3
164E:  BTFSC  F83.3
1650:  BRA    165E
....................         min++; 
1652:  INCF   06,F
....................         if(min > 59) 
1654:  MOVF   06,W
1656:  SUBLW  3B
1658:  BC    165C
....................           min = 0; 
165A:  CLRF   06
....................       } 
....................       else if(TECLA_MENOS){ 
165C:  BRA    1670
165E:  BSF    F95.2
1660:  BTFSC  F83.2
1662:  BRA    1670
....................         min--; 
1664:  DECF   06,F
....................         if(min == -1) 
1666:  MOVF   06,W
1668:  SUBLW  FF
166A:  BNZ   1670
....................           min = 59; 
166C:  MOVLW  3B
166E:  MOVWF  06
....................       } 
....................       break; 
1670:  BRA    18A8
....................     case 3: //segundo 
....................       display(0,0xC0); 
1672:  CLRF   2A
1674:  MOVLW  C0
1676:  MOVWF  2B
1678:  CALL   04E2
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Segundos:\%02d            ", sec); 
167C:  CLRF   15
167E:  MOVF   15,W
1680:  CALL   0138
1684:  INCF   15,F
1686:  MOVWF  00
1688:  MOVWF  29
168A:  CALL   0BCC
168E:  MOVLW  09
1690:  SUBWF  15,W
1692:  BNZ   167E
1694:  MOVFF  05,16
1698:  MOVLW  01
169A:  MOVWF  17
169C:  RCALL  11BA
169E:  MOVLW  0D
16A0:  MOVWF  16
16A2:  MOVF   16,W
16A4:  CALL   0138
16A8:  INCF   16,F
16AA:  MOVWF  00
16AC:  MOVWF  29
16AE:  CALL   0BCC
16B2:  MOVLW  19
16B4:  SUBWF  16,W
16B6:  BNZ   16A2
....................       if(TECLA_SET) 
16B8:  BSF    F95.0
16BA:  BTFSC  F83.0
16BC:  BRA    16C4
....................         state = 4; 
16BE:  MOVLW  04
16C0:  MOVWF  13
....................       else if(TECLA_MAIS){ 
16C2:  BRA    16E8
16C4:  BSF    F95.3
16C6:  BTFSC  F83.3
16C8:  BRA    16D6
....................         sec++; 
16CA:  INCF   05,F
....................         if(sec > 59) 
16CC:  MOVF   05,W
16CE:  SUBLW  3B
16D0:  BC    16D4
....................           sec = 0; 
16D2:  CLRF   05
....................       } 
....................       else if(TECLA_MENOS){ 
16D4:  BRA    16E8
16D6:  BSF    F95.2
16D8:  BTFSC  F83.2
16DA:  BRA    16E8
....................         sec--; 
16DC:  DECF   05,F
....................         if(sec == -1) 
16DE:  MOVF   05,W
16E0:  SUBLW  FF
16E2:  BNZ   16E8
....................           sec = 59; 
16E4:  MOVLW  3B
16E6:  MOVWF  05
....................       } 
....................       break; 
16E8:  BRA    18A8
....................     case 4: //dia 
....................       display(0,0xC0); 
16EA:  CLRF   2A
16EC:  MOVLW  C0
16EE:  MOVWF  2B
16F0:  CALL   04E2
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Dia:\%02d            ", day); 
16F4:  CLRF   15
16F6:  MOVF   15,W
16F8:  CALL   0162
16FC:  INCF   15,F
16FE:  MOVWF  00
1700:  MOVWF  29
1702:  CALL   0BCC
1706:  MOVLW  04
1708:  SUBWF  15,W
170A:  BNZ   16F6
170C:  MOVFF  08,16
1710:  MOVLW  01
1712:  MOVWF  17
1714:  RCALL  11BA
1716:  MOVLW  08
1718:  MOVWF  16
171A:  MOVF   16,W
171C:  CALL   0162
1720:  INCF   16,F
1722:  MOVWF  00
1724:  MOVWF  29
1726:  CALL   0BCC
172A:  MOVLW  14
172C:  SUBWF  16,W
172E:  BNZ   171A
....................       if(TECLA_SET) 
1730:  BSF    F95.0
1732:  BTFSC  F83.0
1734:  BRA    173C
....................         state = 5; 
1736:  MOVLW  05
1738:  MOVWF  13
....................       else if(TECLA_MAIS){ 
173A:  BRA    1760
173C:  BSF    F95.3
173E:  BTFSC  F83.3
1740:  BRA    1750
....................         day++; 
1742:  INCF   08,F
....................         if(day > 31) 
1744:  MOVF   08,W
1746:  SUBLW  1F
1748:  BC    174E
....................           day = 1; 
174A:  MOVLW  01
174C:  MOVWF  08
....................       } 
....................       else if(TECLA_MENOS){ 
174E:  BRA    1760
1750:  BSF    F95.2
1752:  BTFSC  F83.2
1754:  BRA    1760
....................         day--; 
1756:  DECF   08,F
....................         if(day < 1) 
1758:  MOVF   08,F
175A:  BNZ   1760
....................           day = 31; 
175C:  MOVLW  1F
175E:  MOVWF  08
....................       } 
....................       break; 
1760:  BRA    18A8
....................     case 5: //mes 
....................       display(0,0xC0); 
1762:  CLRF   2A
1764:  MOVLW  C0
1766:  MOVWF  2B
1768:  CALL   04E2
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Mes:\%02d            ", month); 
176C:  CLRF   15
176E:  MOVF   15,W
1770:  CALL   0188
1774:  INCF   15,F
1776:  MOVWF  00
1778:  MOVWF  29
177A:  CALL   0BCC
177E:  MOVLW  04
1780:  SUBWF  15,W
1782:  BNZ   176E
1784:  MOVFF  09,16
1788:  MOVLW  01
178A:  MOVWF  17
178C:  RCALL  11BA
178E:  MOVLW  08
1790:  MOVWF  16
1792:  MOVF   16,W
1794:  CALL   0188
1798:  INCF   16,F
179A:  MOVWF  00
179C:  MOVWF  29
179E:  CALL   0BCC
17A2:  MOVLW  14
17A4:  SUBWF  16,W
17A6:  BNZ   1792
....................       if(TECLA_SET) 
17A8:  BSF    F95.0
17AA:  BTFSC  F83.0
17AC:  BRA    17B4
....................         state = 6; 
17AE:  MOVLW  06
17B0:  MOVWF  13
....................       else if(TECLA_MAIS){ 
17B2:  BRA    17D8
17B4:  BSF    F95.3
17B6:  BTFSC  F83.3
17B8:  BRA    17C8
....................         month++; 
17BA:  INCF   09,F
....................         if(month > 12) 
17BC:  MOVF   09,W
17BE:  SUBLW  0C
17C0:  BC    17C6
....................           month = 1; 
17C2:  MOVLW  01
17C4:  MOVWF  09
....................       } 
....................       else if(TECLA_MENOS){ 
17C6:  BRA    17D8
17C8:  BSF    F95.2
17CA:  BTFSC  F83.2
17CC:  BRA    17D8
....................         month--; 
17CE:  DECF   09,F
....................         if(month < 1) 
17D0:  MOVF   09,F
17D2:  BNZ   17D8
....................           month = 12; 
17D4:  MOVLW  0C
17D6:  MOVWF  09
....................       } 
....................       break; 
17D8:  BRA    18A8
....................     case 6: //ano 
....................       display(0,0xC0); 
17DA:  CLRF   2A
17DC:  MOVLW  C0
17DE:  MOVWF  2B
17E0:  CALL   04E2
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Ano:\%02d            ", yr); 
17E4:  CLRF   15
17E6:  MOVF   15,W
17E8:  CALL   01AE
17EC:  INCF   15,F
17EE:  MOVWF  00
17F0:  MOVWF  29
17F2:  CALL   0BCC
17F6:  MOVLW  04
17F8:  SUBWF  15,W
17FA:  BNZ   17E6
17FC:  MOVFF  0A,16
1800:  MOVLW  01
1802:  MOVWF  17
1804:  RCALL  11BA
1806:  MOVLW  08
1808:  MOVWF  16
180A:  MOVF   16,W
180C:  CALL   01AE
1810:  INCF   16,F
1812:  MOVWF  00
1814:  MOVWF  29
1816:  CALL   0BCC
181A:  MOVLW  14
181C:  SUBWF  16,W
181E:  BNZ   180A
....................       if(TECLA_SET) 
1820:  BSF    F95.0
1822:  BTFSC  F83.0
1824:  BRA    182C
....................         state = 7; 
1826:  MOVLW  07
1828:  MOVWF  13
....................       else if(TECLA_MAIS){ 
182A:  BRA    184E
182C:  BSF    F95.3
182E:  BTFSC  F83.3
1830:  BRA    183E
....................         yr++; 
1832:  INCF   0A,F
....................         if(yr > 30) 
1834:  MOVF   0A,W
1836:  SUBLW  1E
1838:  BC    183C
....................           yr = 0; 
183A:  CLRF   0A
....................       } 
....................       else if(TECLA_MENOS){ 
183C:  BRA    184E
183E:  BSF    F95.2
1840:  BTFSC  F83.2
1842:  BRA    184E
....................         yr--; 
1844:  DECF   0A,F
....................         if(yr < 1) 
1846:  MOVF   0A,F
1848:  BNZ   184E
....................           yr = 30; 
184A:  MOVLW  1E
184C:  MOVWF  0A
....................       } 
....................       break; 
184E:  BRA    18A8
....................     case 7: //mes 
....................  
....................       //envia o cursor do LCD para a posicao 1,0 
....................       display(0,0xC0); 
1850:  CLRF   2A
1852:  MOVLW  C0
1854:  MOVWF  2B
1856:  CALL   04E2
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Salvar? + SIM, - NAO");  
185A:  CLRF   15
185C:  MOVF   15,W
185E:  CALL   01D4
1862:  INCF   15,F
1864:  MOVWF  00
1866:  MOVWF  29
1868:  CALL   0BCC
186C:  MOVLW  14
186E:  SUBWF  15,W
1870:  BNZ   185C
....................       if(TECLA_MAIS){ 
1872:  BSF    F95.3
1874:  BTFSC  F83.3
1876:  BRA    189C
....................         ds1307_set_date_time(day,month,yr,dow,hrs,min,sec); 
1878:  MOVFF  08,15
187C:  MOVFF  09,16
1880:  MOVFF  0A,17
1884:  MOVFF  0B,18
1888:  MOVFF  07,19
188C:  MOVFF  06,1A
1890:  MOVFF  05,1B
1894:  BRA    13A8
....................         tela = 0; 
1896:  CLRF   0D
....................         state = 0; 
1898:  CLRF   13
....................       } 
....................       else if(TECLA_MENOS){ 
189A:  BRA    18A6
189C:  BSF    F95.2
189E:  BTFSC  F83.2
18A0:  BRA    18A6
....................         state = 0; 
18A2:  CLRF   13
....................         tela = 0; 
18A4:  CLRF   0D
....................       } 
....................       break; 
18A6:  BRA    18A8
....................     } 
....................  
.................... } 
18A8:  GOTO   197A (RETURN)
....................  
.................... configure_temperature() { 
....................   static int state; 
....................  
....................   //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0x80); 
*
12E8:  CLRF   2A
12EA:  MOVLW  80
12EC:  MOVWF  2B
12EE:  CALL   04E2
....................   //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"Config Temperatura    "); 
12F2:  CLRF   15
12F4:  MOVF   15,W
12F6:  CALL   01FA
12FA:  INCF   15,F
12FC:  MOVWF  00
12FE:  MOVWF  29
1300:  RCALL  0BCC
1302:  MOVLW  16
1304:  SUBWF  15,W
1306:  BNZ   12F4
....................  
....................   //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0xC0); 
1308:  CLRF   2A
130A:  MOVLW  C0
130C:  MOVWF  2B
130E:  CALL   04E2
....................   //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"Temp Max: \%02d             ", temperatura_maxima);  
1312:  CLRF   15
1314:  MOVF   15,W
1316:  CALL   0222
131A:  INCF   15,F
131C:  MOVWF  00
131E:  MOVWF  29
1320:  RCALL  0BCC
1322:  MOVLW  0A
1324:  SUBWF  15,W
1326:  BNZ   1314
1328:  MOVFF  0C,16
132C:  MOVLW  01
132E:  MOVWF  17
1330:  RCALL  11BA
1332:  MOVLW  0E
1334:  MOVWF  16
1336:  MOVF   16,W
1338:  CALL   0222
133C:  INCF   16,F
133E:  MOVWF  00
1340:  MOVWF  29
1342:  RCALL  0BCC
1344:  MOVLW  1B
1346:  SUBWF  16,W
1348:  BNZ   1336
....................  
....................   switch(state){ 
134A:  MOVF   14,W
134C:  BZ    1354
134E:  XORLW  01
1350:  BZ    1376
1352:  BRA    13A4
....................   case 0: //menu superior 
....................     if(TECLA_SET) 
1354:  BSF    F95.0
1356:  BTFSC  F83.0
1358:  BRA    1360
....................       state = 1; 
135A:  MOVLW  01
135C:  MOVWF  14
....................     else if(TECLA_MAIS) 
135E:  BRA    1374
1360:  BSF    F95.3
1362:  BTFSC  F83.3
1364:  BRA    136C
....................       tela = 2; 
1366:  MOVLW  02
1368:  MOVWF  0D
....................     else if(TECLA_MENOS) 
136A:  BRA    1374
136C:  BSF    F95.2
136E:  BTFSC  F83.2
1370:  BRA    1374
....................       tela = 0; 
1372:  CLRF   0D
....................     break; 
1374:  BRA    13A4
....................  
....................   case 1: //temperatura maxima 
....................     if(TECLA_SET) 
1376:  BSF    F95.0
1378:  BTFSC  F83.0
137A:  BRA    1380
....................       state = 0; 
137C:  CLRF   14
....................     else if(TECLA_MAIS){ 
137E:  BRA    13A2
1380:  BSF    F95.3
1382:  BTFSC  F83.3
1384:  BRA    1392
....................       temperatura_maxima++; 
1386:  INCF   0C,F
....................       if(temperatura_maxima > 100) 
1388:  MOVF   0C,W
138A:  SUBLW  64
138C:  BC    1390
....................         temperatura_maxima = 0; 
138E:  CLRF   0C
....................     } 
....................     else if(TECLA_MENOS){ 
1390:  BRA    13A2
1392:  BSF    F95.2
1394:  BTFSC  F83.2
1396:  BRA    13A2
....................       temperatura_maxima--; 
1398:  DECF   0C,F
....................       if(temperatura_maxima < 1) 
139A:  MOVF   0C,F
139C:  BNZ   13A2
....................         temperatura_maxima = 100; 
139E:  MOVLW  64
13A0:  MOVWF  0C
....................     } 
....................     break; 
13A2:  BRA    13A4
....................   } 
.................... } 
13A4:  GOTO   197A (RETURN)

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   BROWNOUT WDT128 NOWDT BORV20 PUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
