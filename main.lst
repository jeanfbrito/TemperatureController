CCS PCH C Compiler, Version 4.057, 8241               13-mai-13 20:09

               Filename: main.lst

               ROM used: 5428 bytes (17%)
                         Largest free fragment is 27340
               RAM used: 20 (1%) at main() level
                         47 (3%) worst case
               Stack:    4 locations

*
0000:  GOTO   148E
.................... #include <18f452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(clock=20000000) 
*
0484:  CLRF   FEA
0486:  MOVLW  14
0488:  MOVWF  FE9
048A:  MOVF   FEF,W
048C:  BZ    04A8
048E:  MOVLW  06
0490:  MOVWF  01
0492:  CLRF   00
0494:  DECFSZ 00,F
0496:  BRA    0494
0498:  DECFSZ 01,F
049A:  BRA    0492
049C:  MOVLW  7B
049E:  MOVWF  00
04A0:  DECFSZ 00,F
04A2:  BRA    04A0
04A4:  DECFSZ FEF,F
04A6:  BRA    048E
04A8:  RETLW  00
04AA:  MOVLW  03
04AC:  SUBWF  14,F
04AE:  BNC   04C2
04B0:  CLRF   FEA
04B2:  MOVLW  14
04B4:  MOVWF  FE9
04B6:  MOVF   FEF,W
04B8:  BZ    04C2
04BA:  BRA    04BE
04BC:  BRA    04BE
04BE:  DECFSZ FEF,F
04C0:  BRA    04BC
04C2:  RETLW  00
.................... #fuses HS,NOWDT,PUT 
.................... #include <lcd_generico.c> 
.................... /* 
....................  
.................... Função para utilização do display LCD para qualquer tamanho 
....................  
....................    inic_display();                        função para configurar e inicializar o display 
....................    display(char tipo,char dado);          função para enviar um comando ou um dado para o display 
....................    mostra(char dado);                     funçao para enviar um dado para o display 
....................  
....................    Configuração dos pinos do microcontrolador 
....................  
....................    RB0 = enable display 
....................    RB1 = RS 
....................    RB2 = RW 
....................    RB3 = 
....................    RB4 = DB4 
....................    RB5 = DB5 
....................    RB6 = DB6 
....................    RB7 = DB7 
....................  
....................    Primeira linha = 0x80 
....................    Segunda  linha = 0xC0 
....................    Terceira linha = 0xA0 
....................    Quarta linha   = 0xE0 
....................  
.................... Aprimorado por Cleber Toss Hoffmann 
.................... cleber.toss.hoffmann@gmail.com 
....................  
.................... */ 
.................... // 
.................... #byte PORTB=0xF81 
.................... #byte TRISB=0xF93 
....................  
.................... //Constantes 
.................... #define set_bit0 0x01 
.................... #define set_bit1 0x02 
.................... #define set_bit2 0x04 
....................  
.................... #define clear_bit0 0xfe 
.................... #define clear_bit1 0xfd 
.................... #define clear_bit2 0xfb 
....................  
.................... void inic_display(); 
....................  
.................... #separate 
.................... void display(char tipo,char dado); 
....................  
.................... #separate 
.................... void mostra(char dado); 
....................  
.................... void inic_display() 
.................... { 
....................  TRISB =0x00; 
*
0540:  CLRF   F93
....................  delay_ms(50); 
0542:  MOVLW  32
0544:  MOVWF  14
0546:  RCALL  0484
....................  
....................  PORTB  = 0x30; 
0548:  MOVLW  30
054A:  MOVWF  F81
....................  PORTB |= set_bit0; 
054C:  BSF    F81.0
....................  delay_us(5); 
054E:  MOVLW  08
0550:  MOVWF  00
0552:  DECFSZ 00,F
0554:  BRA    0552
....................  PORTB &= clear_bit0; 
0556:  BCF    F81.0
....................  delay_ms(25); 
0558:  MOVLW  19
055A:  MOVWF  14
055C:  RCALL  0484
....................  
....................  PORTB = 0x30; 
055E:  MOVLW  30
0560:  MOVWF  F81
....................  PORTB |= set_bit0; 
0562:  BSF    F81.0
....................  delay_us(5); 
0564:  MOVLW  08
0566:  MOVWF  00
0568:  DECFSZ 00,F
056A:  BRA    0568
....................  PORTB &= clear_bit0; 
056C:  BCF    F81.0
....................  delay_ms(25); 
056E:  MOVLW  19
0570:  MOVWF  14
0572:  RCALL  0484
....................  
....................  PORTB = 0x30; 
0574:  MOVLW  30
0576:  MOVWF  F81
....................  PORTB |= set_bit0; 
0578:  BSF    F81.0
....................  delay_us(5); 
057A:  MOVLW  08
057C:  MOVWF  00
057E:  DECFSZ 00,F
0580:  BRA    057E
....................  PORTB &= clear_bit0; 
0582:  BCF    F81.0
....................  delay_ms(25); 
0584:  MOVLW  19
0586:  MOVWF  14
0588:  RCALL  0484
....................  
....................  PORTB = 0x30; 
058A:  MOVLW  30
058C:  MOVWF  F81
....................  PORTB |= set_bit0; 
058E:  BSF    F81.0
....................  delay_us(5); 
0590:  MOVLW  08
0592:  MOVWF  00
0594:  DECFSZ 00,F
0596:  BRA    0594
....................  PORTB &= clear_bit0; 
0598:  BCF    F81.0
....................  
....................  delay_us(200); 
059A:  MOVLW  C8
059C:  MOVWF  14
059E:  RCALL  04AA
....................  PORTB = 0x20; 
05A0:  MOVLW  20
05A2:  MOVWF  F81
....................  PORTB |= set_bit0; 
05A4:  BSF    F81.0
....................  delay_us(5); 
05A6:  MOVLW  08
05A8:  MOVWF  00
05AA:  DECFSZ 00,F
05AC:  BRA    05AA
....................  PORTB &= clear_bit0; 
05AE:  BCF    F81.0
....................  
....................  delay_us(200); 
05B0:  MOVLW  C8
05B2:  MOVWF  14
05B4:  RCALL  04AA
....................  display(0,0x28); 
05B6:  CLRF   23
05B8:  MOVLW  28
05BA:  MOVWF  24
05BC:  RCALL  04C4
....................  display(0,0x08); 
05BE:  CLRF   23
05C0:  MOVLW  08
05C2:  MOVWF  24
05C4:  RCALL  04C4
....................  display(0,0x01); 
05C6:  CLRF   23
05C8:  MOVLW  01
05CA:  MOVWF  24
05CC:  RCALL  04C4
....................  delay_ms(5); 
05CE:  MOVLW  05
05D0:  MOVWF  14
05D2:  RCALL  0484
....................  display(0,0x06); 
05D4:  CLRF   23
05D6:  MOVLW  06
05D8:  MOVWF  24
05DA:  RCALL  04C4
....................  display(0,0x0c); 
05DC:  CLRF   23
05DE:  MOVLW  0C
05E0:  MOVWF  24
05E2:  RCALL  04C4
....................  
.................... } 
05E4:  GOTO   14D4 (RETURN)
....................  
....................  
.................... /* display 
....................    Envia um dado para o display. 
....................    Se tipo=0, é um comando (RS=0) 
....................    Se tipo=1, é um dado (RS=1) 
.................... */ 
.................... #separate 
.................... void display(char tipo,char dado) 
.................... { 
....................  char temp; 
....................  if(tipo == true) 
*
04C4:  DECFSZ 23,W
04C6:  BRA    0508
....................     { 
....................      temp=(dado & 0xf0) | set_bit1; 
04C8:  MOVF   24,W
04CA:  ANDLW  F0
04CC:  IORLW  02
04CE:  MOVWF  25
....................      PORTB = temp; 
04D0:  MOVFF  25,F81
....................      PORTB |= set_bit0; 
04D4:  BSF    F81.0
....................      delay_us(5); 
04D6:  MOVLW  08
04D8:  MOVWF  00
04DA:  DECFSZ 00,F
04DC:  BRA    04DA
....................      PORTB &= clear_bit0; 
04DE:  BCF    F81.0
.................... //   delay_us(50); 
....................      temp=(dado << 4) | set_bit1; 
04E0:  SWAPF  24,W
04E2:  MOVWF  00
04E4:  MOVLW  F0
04E6:  ANDWF  00,F
04E8:  MOVF   00,W
04EA:  IORLW  02
04EC:  MOVWF  25
....................      PORTB = temp; 
04EE:  MOVFF  25,F81
....................      PORTB |= set_bit0; 
04F2:  BSF    F81.0
....................      delay_us(5); 
04F4:  MOVLW  08
04F6:  MOVWF  00
04F8:  DECFSZ 00,F
04FA:  BRA    04F8
....................      PORTB &= clear_bit0; 
04FC:  BCF    F81.0
....................      delay_us(50); 
04FE:  MOVLW  53
0500:  MOVWF  00
0502:  DECFSZ 00,F
0504:  BRA    0502
....................  
....................     } 
....................  else 
0506:  BRA    053E
....................     { 
....................      temp=(dado & 0xf0); 
0508:  MOVF   24,W
050A:  ANDLW  F0
050C:  MOVWF  25
....................      PORTB = temp; 
050E:  MOVFF  25,F81
....................      PORTB |= set_bit0; 
0512:  BSF    F81.0
....................      delay_us(5); 
0514:  MOVLW  08
0516:  MOVWF  00
0518:  DECFSZ 00,F
051A:  BRA    0518
....................      PORTB &= clear_bit0; 
051C:  BCF    F81.0
.................... //   delay_us(50); 
....................      temp=(dado << 4); 
051E:  SWAPF  24,W
0520:  MOVWF  25
0522:  MOVLW  F0
0524:  ANDWF  25,F
....................      PORTB = temp; 
0526:  MOVFF  25,F81
....................      PORTB |= set_bit0; 
052A:  BSF    F81.0
....................      delay_us(5); 
052C:  MOVLW  08
052E:  MOVWF  00
0530:  DECFSZ 00,F
0532:  BRA    0530
....................      PORTB &= clear_bit0; 
0534:  BCF    F81.0
....................      delay_us(50); 
0536:  MOVLW  53
0538:  MOVWF  00
053A:  DECFSZ 00,F
053C:  BRA    053A
....................     } 
....................  
.................... } 
053E:  RETLW  00
....................  
.................... #separate 
.................... void mostra(char dado) 
.................... { 
....................  display(1,dado); 
*
0944:  MOVLW  01
0946:  MOVWF  23
0948:  MOVFF  22,24
094C:  RCALL  04C4
.................... } 
094E:  RETLW  00
....................  
.................... #include "ds1307.c" 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... ///                               DS1307.C                                   ///  
.................... ///                     Driver for Real Time Clock                           ///  
.................... ///                                                                          ///  
.................... /// ds1307_init() - Enable oscillator without clearing the seconds register -///  
.................... ///                 used when PIC loses power and DS1307 run from 3V BAT     ///  
.................... ///               - Disable squarewave output                                ///  
.................... ///                                                                          ///  
.................... /// ds1307_set_date_time(day,mth,year,dow,hour,min,sec)  Set the date/time   ///  
.................... ///                                                                          ///  
.................... /// ds1307_get_date(day,mth,year,dow)               Get the date             ///  
.................... ///                                                                          ///  
.................... /// ds1307_get_time(hr,min,sec)                     Get the time             ///  
.................... ///                                                                          ///  
.................... ////////////////////////////////////////////////////////////////////////////////  
....................  
.................... #define RTC_SDA  PIN_C4  
.................... #define RTC_SCL  PIN_C3  
....................  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL)  
*
0230:  MOVLW  08
0232:  MOVWF  01
0234:  MOVLW  05
0236:  MOVWF  00
0238:  DECFSZ 00,F
023A:  BRA    0238
023C:  BCF    F8B.3
023E:  BCF    F94.3
0240:  MOVLW  06
0242:  MOVWF  00
0244:  DECFSZ 00,F
0246:  BRA    0244
0248:  RLCF   1C,F
024A:  BCF    F8B.4
024C:  BTFSC  FD8.0
024E:  BSF    F94.4
0250:  BTFSS  FD8.0
0252:  BCF    F94.4
0254:  BSF    F94.3
0256:  BTFSS  F82.3
0258:  BRA    0256
025A:  DECFSZ 01,F
025C:  BRA    0234
025E:  MOVLW  05
0260:  MOVWF  00
0262:  DECFSZ 00,F
0264:  BRA    0262
0266:  BCF    F8B.3
0268:  BCF    F94.3
026A:  NOP   
026C:  BSF    F94.4
026E:  MOVLW  06
0270:  MOVWF  00
0272:  DECFSZ 00,F
0274:  BRA    0272
0276:  MOVLW  06
0278:  MOVWF  00
027A:  DECFSZ 00,F
027C:  BRA    027A
027E:  BSF    F94.3
0280:  BTFSS  F82.3
0282:  BRA    0280
0284:  CLRF   01
0286:  MOVLW  06
0288:  MOVWF  00
028A:  DECFSZ 00,F
028C:  BRA    028A
028E:  BTFSC  F82.4
0290:  BSF    01.0
0292:  BCF    F8B.3
0294:  BCF    F94.3
0296:  BCF    F8B.4
0298:  BCF    F94.4
029A:  RETLW  00
029C:  MOVLW  08
029E:  MOVWF  19
02A0:  MOVFF  00,1A
02A4:  BSF    F94.4
02A6:  MOVLW  06
02A8:  MOVWF  00
02AA:  DECFSZ 00,F
02AC:  BRA    02AA
02AE:  BSF    F94.3
02B0:  BTFSS  F82.3
02B2:  BRA    02B0
02B4:  BTFSC  F82.4
02B6:  BSF    FD8.0
02B8:  BTFSS  F82.4
02BA:  BCF    FD8.0
02BC:  RLCF   01,F
02BE:  MOVLW  05
02C0:  MOVWF  00
02C2:  DECFSZ 00,F
02C4:  BRA    02C2
02C6:  BCF    F94.3
02C8:  BCF    F8B.3
02CA:  DECFSZ 19,F
02CC:  BRA    02A4
02CE:  BSF    F94.4
02D0:  MOVLW  06
02D2:  MOVWF  00
02D4:  DECFSZ 00,F
02D6:  BRA    02D4
02D8:  BCF    F8B.4
02DA:  MOVF   1A,W
02DC:  BTFSS  FD8.2
02DE:  BCF    F94.4
02E0:  NOP   
02E2:  BSF    F94.3
02E4:  BTFSS  F82.3
02E6:  BRA    02E4
02E8:  MOVLW  05
02EA:  MOVWF  00
02EC:  DECFSZ 00,F
02EE:  BRA    02EC
02F0:  BCF    F8B.3
02F2:  BCF    F94.3
02F4:  MOVLW  06
02F6:  MOVWF  00
02F8:  DECFSZ 00,F
02FA:  BRA    02F8
02FC:  BCF    F8B.4
02FE:  BCF    F94.4
0300:  RETLW  00
....................  
.................... BYTE bin2bcd(BYTE binary_value);  
.................... BYTE bcd2bin(BYTE bcd_value);  
....................  
.................... void ds1307_init(void)  
.................... {  
....................    BYTE seconds = 0;  
*
034C:  CLRF   14
....................  
....................    i2c_start();  
034E:  BSF    F94.4
0350:  MOVLW  05
0352:  MOVWF  00
0354:  DECFSZ 00,F
0356:  BRA    0354
0358:  BSF    F94.3
035A:  MOVLW  06
035C:  MOVWF  00
035E:  DECFSZ 00,F
0360:  BRA    035E
0362:  BCF    F8B.4
0364:  BCF    F94.4
0366:  MOVLW  05
0368:  MOVWF  00
036A:  DECFSZ 00,F
036C:  BRA    036A
036E:  BCF    F8B.3
0370:  BCF    F94.3
....................    i2c_write(0xD0);      // WR to RTC  
0372:  MOVLW  D0
0374:  MOVWF  1C
0376:  RCALL  0230
....................    i2c_write(0x00);      // REG 0  
0378:  CLRF   1C
037A:  RCALL  0230
....................    i2c_start();  
037C:  BSF    F94.4
037E:  MOVLW  05
0380:  MOVWF  00
0382:  DECFSZ 00,F
0384:  BRA    0382
0386:  BSF    F94.3
0388:  MOVLW  06
038A:  MOVWF  00
038C:  DECFSZ 00,F
038E:  BRA    038C
0390:  BTFSS  F82.3
0392:  BRA    0390
0394:  BCF    F8B.4
0396:  BCF    F94.4
0398:  MOVLW  05
039A:  MOVWF  00
039C:  DECFSZ 00,F
039E:  BRA    039C
03A0:  BCF    F8B.3
03A2:  BCF    F94.3
....................    i2c_write(0xD1);      // RD from RTC  
03A4:  MOVLW  D1
03A6:  MOVWF  1C
03A8:  RCALL  0230
....................    seconds = bcd2bin(i2c_read(0)); // Read current "seconds" in DS1307  
03AA:  CLRF   00
03AC:  RCALL  029C
03AE:  MOVFF  01,15
03B2:  MOVFF  01,1A
03B6:  RCALL  0302
03B8:  MOVFF  01,14
....................    i2c_stop();  
03BC:  BCF    F94.4
03BE:  NOP   
03C0:  BSF    F94.3
03C2:  BTFSS  F82.3
03C4:  BRA    03C2
03C6:  MOVLW  05
03C8:  MOVWF  00
03CA:  DECFSZ 00,F
03CC:  BRA    03CA
03CE:  BRA    03D0
03D0:  NOP   
03D2:  BSF    F94.4
03D4:  MOVLW  05
03D6:  MOVWF  00
03D8:  DECFSZ 00,F
03DA:  BRA    03D8
....................    seconds &= 0x7F;  
03DC:  BCF    14.7
....................  
....................    delay_us(3);  
03DE:  MOVLW  04
03E0:  MOVWF  00
03E2:  DECFSZ 00,F
03E4:  BRA    03E2
03E6:  BRA    03E8
....................  
....................    i2c_start();  
03E8:  BSF    F94.4
03EA:  MOVLW  05
03EC:  MOVWF  00
03EE:  DECFSZ 00,F
03F0:  BRA    03EE
03F2:  BSF    F94.3
03F4:  MOVLW  06
03F6:  MOVWF  00
03F8:  DECFSZ 00,F
03FA:  BRA    03F8
03FC:  BCF    F8B.4
03FE:  BCF    F94.4
0400:  MOVLW  05
0402:  MOVWF  00
0404:  DECFSZ 00,F
0406:  BRA    0404
0408:  BCF    F8B.3
040A:  BCF    F94.3
....................    i2c_write(0xD0);      // WR to RTC  
040C:  MOVLW  D0
040E:  MOVWF  1C
0410:  RCALL  0230
....................    i2c_write(0x00);      // REG 0  
0412:  CLRF   1C
0414:  RCALL  0230
....................    i2c_write(bin2bcd(seconds));     // Start oscillator with current "seconds value  
0416:  MOVFF  14,1B
041A:  RCALL  0328
041C:  MOVFF  01,15
0420:  MOVFF  01,1C
0424:  RCALL  0230
....................    i2c_start();  
0426:  BSF    F94.4
0428:  MOVLW  05
042A:  MOVWF  00
042C:  DECFSZ 00,F
042E:  BRA    042C
0430:  BSF    F94.3
0432:  MOVLW  06
0434:  MOVWF  00
0436:  DECFSZ 00,F
0438:  BRA    0436
043A:  BTFSS  F82.3
043C:  BRA    043A
043E:  BCF    F8B.4
0440:  BCF    F94.4
0442:  MOVLW  05
0444:  MOVWF  00
0446:  DECFSZ 00,F
0448:  BRA    0446
044A:  BCF    F8B.3
044C:  BCF    F94.3
....................    i2c_write(0xD0);      // WR to RTC  
044E:  MOVLW  D0
0450:  MOVWF  1C
0452:  RCALL  0230
....................    i2c_write(0x07);      // Control Register  
0454:  MOVLW  07
0456:  MOVWF  1C
0458:  RCALL  0230
....................    i2c_write(0x80);     // Disable squarewave output pin  
045A:  MOVLW  80
045C:  MOVWF  1C
045E:  RCALL  0230
....................    i2c_stop();  
0460:  BCF    F94.4
0462:  NOP   
0464:  BSF    F94.3
0466:  BTFSS  F82.3
0468:  BRA    0466
046A:  MOVLW  05
046C:  MOVWF  00
046E:  DECFSZ 00,F
0470:  BRA    046E
0472:  BRA    0474
0474:  NOP   
0476:  BSF    F94.4
0478:  MOVLW  05
047A:  MOVWF  00
047C:  DECFSZ 00,F
047E:  BRA    047C
....................  
.................... }  
0480:  GOTO   14A8 (RETURN)
....................  
.................... void ds1307_set_date_time(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min, BYTE sec)  
.................... {  
....................   sec &= 0x7F;  
*
0F72:  BCF    1A.7
....................   hr &= 0x3F;  
0F74:  MOVLW  3F
0F76:  ANDWF  18,F
....................  
....................   i2c_start();  
0F78:  BSF    F94.4
0F7A:  MOVLW  05
0F7C:  MOVWF  00
0F7E:  DECFSZ 00,F
0F80:  BRA    0F7E
0F82:  BSF    F94.3
0F84:  MOVLW  06
0F86:  MOVWF  00
0F88:  DECFSZ 00,F
0F8A:  BRA    0F88
0F8C:  BCF    F8B.4
0F8E:  BCF    F94.4
0F90:  MOVLW  05
0F92:  MOVWF  00
0F94:  DECFSZ 00,F
0F96:  BRA    0F94
0F98:  BCF    F8B.3
0F9A:  BCF    F94.3
....................   i2c_write(0xD0);            // I2C write address  
0F9C:  MOVLW  D0
0F9E:  MOVWF  1C
0FA0:  CALL   0230
....................   i2c_write(0x00);            // Start at REG 0 - Seconds  
0FA4:  CLRF   1C
0FA6:  CALL   0230
....................   i2c_write(bin2bcd(sec));      // REG 0  
0FAA:  MOVFF  1A,1B
0FAE:  CALL   0328
0FB2:  MOVFF  01,1B
0FB6:  MOVFF  01,1C
0FBA:  CALL   0230
....................   i2c_write(bin2bcd(min));      // REG 1  
0FBE:  MOVFF  19,1B
0FC2:  CALL   0328
0FC6:  MOVFF  01,1B
0FCA:  MOVFF  01,1C
0FCE:  CALL   0230
....................   i2c_write(bin2bcd(hr));      // REG 2  
0FD2:  MOVFF  18,1B
0FD6:  CALL   0328
0FDA:  MOVFF  01,1B
0FDE:  MOVFF  01,1C
0FE2:  CALL   0230
....................   i2c_write(bin2bcd(dow));      // REG 3  
0FE6:  MOVFF  17,1B
0FEA:  CALL   0328
0FEE:  MOVFF  01,1B
0FF2:  MOVFF  01,1C
0FF6:  CALL   0230
....................   i2c_write(bin2bcd(day));      // REG 4  
0FFA:  MOVFF  14,1B
0FFE:  CALL   0328
1002:  MOVFF  01,1B
1006:  MOVFF  01,1C
100A:  CALL   0230
....................   i2c_write(bin2bcd(mth));      // REG 5  
100E:  MOVFF  15,1B
1012:  CALL   0328
1016:  MOVFF  01,1B
101A:  MOVFF  01,1C
101E:  CALL   0230
....................   i2c_write(bin2bcd(year));      // REG 6  
1022:  MOVFF  16,1B
1026:  CALL   0328
102A:  MOVFF  01,1B
102E:  MOVFF  01,1C
1032:  CALL   0230
....................   i2c_write(0x80);            // REG 7 - Disable squarewave output pin  
1036:  MOVLW  80
1038:  MOVWF  1C
103A:  CALL   0230
....................   i2c_stop();  
103E:  BCF    F94.4
1040:  NOP   
1042:  BSF    F94.3
1044:  BTFSS  F82.3
1046:  BRA    1044
1048:  MOVLW  05
104A:  MOVWF  00
104C:  DECFSZ 00,F
104E:  BRA    104C
1050:  BRA    1052
1052:  NOP   
1054:  BSF    F94.4
1056:  MOVLW  05
1058:  MOVWF  00
105A:  DECFSZ 00,F
105C:  BRA    105A
.................... }  
105E:  GOTO   144E (RETURN)
....................  
.................... void ds1307_get_date(BYTE &day, BYTE &mth, BYTE &year, BYTE &dow)  
.................... {  
....................   i2c_start();  
*
0682:  BSF    F94.4
0684:  MOVLW  05
0686:  MOVWF  00
0688:  DECFSZ 00,F
068A:  BRA    0688
068C:  BSF    F94.3
068E:  MOVLW  06
0690:  MOVWF  00
0692:  DECFSZ 00,F
0694:  BRA    0692
0696:  BCF    F8B.4
0698:  BCF    F94.4
069A:  MOVLW  05
069C:  MOVWF  00
069E:  DECFSZ 00,F
06A0:  BRA    069E
06A2:  BCF    F8B.3
06A4:  BCF    F94.3
....................   i2c_write(0xD0);  
06A6:  MOVLW  D0
06A8:  MOVWF  1C
06AA:  RCALL  0230
....................   i2c_write(0x03);            // Start at REG 3 - Day of week  
06AC:  MOVLW  03
06AE:  MOVWF  1C
06B0:  RCALL  0230
....................   i2c_start();  
06B2:  BSF    F94.4
06B4:  MOVLW  05
06B6:  MOVWF  00
06B8:  DECFSZ 00,F
06BA:  BRA    06B8
06BC:  BSF    F94.3
06BE:  MOVLW  06
06C0:  MOVWF  00
06C2:  DECFSZ 00,F
06C4:  BRA    06C2
06C6:  BTFSS  F82.3
06C8:  BRA    06C6
06CA:  BCF    F8B.4
06CC:  BCF    F94.4
06CE:  MOVLW  05
06D0:  MOVWF  00
06D2:  DECFSZ 00,F
06D4:  BRA    06D2
06D6:  BCF    F8B.3
06D8:  BCF    F94.3
....................   i2c_write(0xD1);  
06DA:  MOVLW  D1
06DC:  MOVWF  1C
06DE:  RCALL  0230
....................   dow  = bcd2bin(i2c_read() & 0x7f);   // REG 3  
06E0:  MOVLW  01
06E2:  MOVWF  00
06E4:  RCALL  029C
06E6:  MOVF   01,W
06E8:  ANDLW  7F
06EA:  MOVWF  15
06EC:  MOVWF  1A
06EE:  RCALL  0302
06F0:  MOVFF  01,0B
....................   day  = bcd2bin(i2c_read() & 0x3f);   // REG 4  
06F4:  MOVLW  01
06F6:  MOVWF  00
06F8:  RCALL  029C
06FA:  MOVF   01,W
06FC:  ANDLW  3F
06FE:  MOVWF  15
0700:  MOVWF  1A
0702:  RCALL  0302
0704:  MOVFF  01,08
....................   mth  = bcd2bin(i2c_read() & 0x1f);   // REG 5  
0708:  MOVLW  01
070A:  MOVWF  00
070C:  RCALL  029C
070E:  MOVF   01,W
0710:  ANDLW  1F
0712:  MOVWF  15
0714:  MOVWF  1A
0716:  RCALL  0302
0718:  MOVFF  01,09
....................   year = bcd2bin(i2c_read(0));            // REG 6  
071C:  CLRF   00
071E:  RCALL  029C
0720:  MOVFF  01,14
0724:  MOVFF  01,1A
0728:  RCALL  0302
072A:  MOVFF  01,0A
....................   i2c_stop();  
072E:  BCF    F94.4
0730:  NOP   
0732:  BSF    F94.3
0734:  BTFSS  F82.3
0736:  BRA    0734
0738:  MOVLW  05
073A:  MOVWF  00
073C:  DECFSZ 00,F
073E:  BRA    073C
0740:  BRA    0742
0742:  NOP   
0744:  BSF    F94.4
0746:  MOVLW  05
0748:  MOVWF  00
074A:  DECFSZ 00,F
074C:  BRA    074A
.................... }  
....................  
.................... void ds1307_get_time(BYTE &hr, BYTE &min, BYTE &sec)  
.................... {  
....................   i2c_start();  
074E:  BSF    F94.4
0750:  MOVLW  05
0752:  MOVWF  00
0754:  DECFSZ 00,F
0756:  BRA    0754
0758:  BSF    F94.3
075A:  MOVLW  06
075C:  MOVWF  00
075E:  DECFSZ 00,F
0760:  BRA    075E
0762:  BCF    F8B.4
0764:  BCF    F94.4
0766:  MOVLW  05
0768:  MOVWF  00
076A:  DECFSZ 00,F
076C:  BRA    076A
076E:  BCF    F8B.3
0770:  BCF    F94.3
....................   i2c_write(0xD0);  
0772:  MOVLW  D0
0774:  MOVWF  1C
0776:  RCALL  0230
....................   i2c_write(0x00);            // Start at REG 0 - Seconds  
0778:  CLRF   1C
077A:  RCALL  0230
....................   i2c_start();  
077C:  BSF    F94.4
077E:  MOVLW  05
0780:  MOVWF  00
0782:  DECFSZ 00,F
0784:  BRA    0782
0786:  BSF    F94.3
0788:  MOVLW  06
078A:  MOVWF  00
078C:  DECFSZ 00,F
078E:  BRA    078C
0790:  BTFSS  F82.3
0792:  BRA    0790
0794:  BCF    F8B.4
0796:  BCF    F94.4
0798:  MOVLW  05
079A:  MOVWF  00
079C:  DECFSZ 00,F
079E:  BRA    079C
07A0:  BCF    F8B.3
07A2:  BCF    F94.3
....................   i2c_write(0xD1);  
07A4:  MOVLW  D1
07A6:  MOVWF  1C
07A8:  RCALL  0230
....................   sec = bcd2bin(i2c_read() & 0x7f);  
07AA:  MOVLW  01
07AC:  MOVWF  00
07AE:  RCALL  029C
07B0:  MOVF   01,W
07B2:  ANDLW  7F
07B4:  MOVWF  15
07B6:  MOVWF  1A
07B8:  RCALL  0302
07BA:  MOVFF  01,05
....................   min = bcd2bin(i2c_read() & 0x7f);  
07BE:  MOVLW  01
07C0:  MOVWF  00
07C2:  RCALL  029C
07C4:  MOVF   01,W
07C6:  ANDLW  7F
07C8:  MOVWF  15
07CA:  MOVWF  1A
07CC:  RCALL  0302
07CE:  MOVFF  01,06
....................   hr  = bcd2bin(i2c_read(0) & 0x3f);  
07D2:  CLRF   00
07D4:  RCALL  029C
07D6:  MOVF   01,W
07D8:  ANDLW  3F
07DA:  MOVWF  15
07DC:  MOVWF  1A
07DE:  RCALL  0302
07E0:  MOVFF  01,07
....................   i2c_stop();  
07E4:  BCF    F94.4
07E6:  NOP   
07E8:  BSF    F94.3
07EA:  BTFSS  F82.3
07EC:  BRA    07EA
07EE:  MOVLW  05
07F0:  MOVWF  00
07F2:  DECFSZ 00,F
07F4:  BRA    07F2
07F6:  BRA    07F8
07F8:  NOP   
07FA:  BSF    F94.4
07FC:  MOVLW  05
07FE:  MOVWF  00
0800:  DECFSZ 00,F
0802:  BRA    0800
....................  
.................... }  
....................  
.................... BYTE bin2bcd(BYTE binary_value)  
.................... {  
....................   BYTE temp;  
....................   BYTE retval;  
....................  
....................   temp = binary_value;  
*
0328:  MOVFF  1B,1C
....................   retval = 0;  
032C:  CLRF   1D
....................  
....................   while(1)  
....................   {  
....................     // Get the tens digit by doing multiple subtraction  
....................     // of 10 from the binary value.  
....................     if(temp >= 10)  
032E:  MOVF   1C,W
0330:  SUBLW  09
0332:  BC    033E
....................     {  
....................       temp -= 10;  
0334:  MOVLW  0A
0336:  SUBWF  1C,F
....................       retval += 0x10;  
0338:  MOVLW  10
033A:  ADDWF  1D,F
....................     }  
....................     else // Get the ones digit by adding the remainder.  
033C:  BRA    0344
....................     {  
....................       retval += temp;  
033E:  MOVF   1C,W
0340:  ADDWF  1D,F
....................       break;  
0342:  BRA    0346
....................     }  
....................   }  
0344:  BRA    032E
....................  
....................   return(retval);  
0346:  MOVFF  1D,01
.................... }  
034A:  RETLW  00
....................  
....................  
.................... // Input range - 00 to 99.  
.................... BYTE bcd2bin(BYTE bcd_value)  
.................... {  
....................   BYTE temp;  
....................  
....................   temp = bcd_value;  
*
0302:  MOVFF  1A,1B
....................   // Shifting upper digit right by 1 is same as multiplying by 8.  
....................   temp >>= 1;  
0306:  BCF    FD8.0
0308:  RRCF   1B,F
....................   // Isolate the bits for the upper digit.  
....................   temp &= 0x78;  
030A:  MOVLW  78
030C:  ANDWF  1B,F
....................  
....................   // Now return: (Tens * 8) + (Tens * 2) + Ones  
....................  
....................   return(temp + (temp >> 2) + (bcd_value & 0x0f));  
030E:  RRCF   1B,W
0310:  MOVWF  00
0312:  RRCF   00,F
0314:  MOVLW  3F
0316:  ANDWF  00,F
0318:  MOVF   00,W
031A:  ADDWF  1B,W
031C:  MOVWF  1C
031E:  MOVF   1A,W
0320:  ANDLW  0F
0322:  ADDWF  1C,W
0324:  MOVWF  01
.................... }  
0326:  RETLW  00
....................  
.................... //------------------------------------------------------------------------ 
.................... // Read one byte at the specified address. 
.................... // This function is used to access the control byte 
.................... // or the NVRAM bytes. 
....................  
.................... char ds1307_read_byte(char addr) 
.................... { 
.................... char retval; 
....................  
.................... disable_interrupts(GLOBAL); 
*
05E8:  BCF    FF2.6
05EA:  BCF    FF2.7
05EC:  BTFSC  FF2.7
05EE:  BRA    05EA
.................... i2c_start(); 
05F0:  BSF    F94.4
05F2:  MOVLW  05
05F4:  MOVWF  00
05F6:  DECFSZ 00,F
05F8:  BRA    05F6
05FA:  BSF    F94.3
05FC:  MOVLW  06
05FE:  MOVWF  00
0600:  DECFSZ 00,F
0602:  BRA    0600
0604:  BCF    F8B.4
0606:  BCF    F94.4
0608:  MOVLW  05
060A:  MOVWF  00
060C:  DECFSZ 00,F
060E:  BRA    060C
0610:  BCF    F8B.3
0612:  BCF    F94.3
.................... i2c_write(0xD0); 
0614:  MOVLW  D0
0616:  MOVWF  1C
0618:  RCALL  0230
.................... i2c_write(addr); 
061A:  MOVFF  14,1C
061E:  RCALL  0230
....................  
.................... i2c_start(); 
0620:  BSF    F94.4
0622:  MOVLW  05
0624:  MOVWF  00
0626:  DECFSZ 00,F
0628:  BRA    0626
062A:  BSF    F94.3
062C:  MOVLW  06
062E:  MOVWF  00
0630:  DECFSZ 00,F
0632:  BRA    0630
0634:  BTFSS  F82.3
0636:  BRA    0634
0638:  BCF    F8B.4
063A:  BCF    F94.4
063C:  MOVLW  05
063E:  MOVWF  00
0640:  DECFSZ 00,F
0642:  BRA    0640
0644:  BCF    F8B.3
0646:  BCF    F94.3
.................... i2c_write(0xD1); 
0648:  MOVLW  D1
064A:  MOVWF  1C
064C:  RCALL  0230
.................... retval = i2c_read(0);   // Don't ACK the last byte read 
064E:  CLRF   00
0650:  RCALL  029C
0652:  MOVFF  01,15
.................... i2c_stop(); 
0656:  BCF    F94.4
0658:  NOP   
065A:  BSF    F94.3
065C:  BTFSS  F82.3
065E:  BRA    065C
0660:  MOVLW  05
0662:  MOVWF  00
0664:  DECFSZ 00,F
0666:  BRA    0664
0668:  BRA    066A
066A:  NOP   
066C:  BSF    F94.4
066E:  MOVLW  05
0670:  MOVWF  00
0672:  DECFSZ 00,F
0674:  BRA    0672
.................... enable_interrupts(GLOBAL); 
0676:  MOVLW  C0
0678:  IORWF  FF2,F
....................  
.................... return(retval); 
067A:  MOVFF  15,01
.................... } 
067E:  GOTO   0808 (RETURN)
....................  
....................  
....................  
.................... #define TECLA_SET    !input(PIN_D0) 
.................... #define TECLA_MAIS   !input(PIN_D3) 
.................... #define TECLA_MENOS  !input(PIN_D2) 
....................  
.................... BYTE sec;  
.................... BYTE min;  
.................... BYTE hrs;  
.................... BYTE day;  
.................... BYTE month;  
.................... BYTE yr;  
.................... BYTE dow;  
.................... int temperatura_maxima; 
.................... int tela = 0; //0-Tela principal, 1-Config. Temperatura, 2-Config. Horario 
.................... float temperatura; 
....................  
.................... update_clock();  
.................... read_temperature(); 
.................... check_temperature(); 
.................... show_clock(); 
.................... show_temperature(); 
.................... configure_temperature(); 
.................... configure_time(); 
....................  
.................... main() 
.................... {  
*
148E:  CLRF   FF8
1490:  BCF    FD0.7
1492:  CLRF   FEA
1494:  CLRF   FE9
1496:  BSF    FC1.0
1498:  BSF    FC1.1
149A:  BSF    FC1.2
149C:  BCF    FC1.3
149E:  CLRF   0D
14A0:  CLRF   12
14A2:  CLRF   13
....................  
....................  
.................... ds1307_init();  
14A4:  GOTO   034C
....................  
.................... // Set date for -> 15 June 2005 Tuesday  
.................... // Set time for -> 15:20:55  
.................... //ds1307_set_date_time(18,11,12,2,22,05,55);  
....................  
....................  
....................   setup_adc(ADC_CLOCK_INTERNAL); 
14A8:  BCF    FC1.6
14AA:  BSF    FC2.6
14AC:  BSF    FC2.7
14AE:  BSF    FC1.7
14B0:  BSF    FC2.0
.................... //enables the a/d module  
....................   set_adc_channel(0); 
14B2:  MOVLW  00
14B4:  MOVWF  01
14B6:  MOVF   FC2,W
14B8:  ANDLW  C7
14BA:  IORWF  01,W
14BC:  MOVWF  FC2
.................... //the next read_adc call will read channel 0 
....................   delay_us(10); 
14BE:  MOVLW  10
14C0:  MOVWF  00
14C2:  DECFSZ 00,F
14C4:  BRA    14C2
14C6:  NOP   
.................... //a small delay is required after setting the channel 
....................  
.................... //aguarda 100ms 
....................   delay_ms(100); 
14C8:  MOVLW  64
14CA:  MOVWF  14
14CC:  CALL   0484
....................  
.................... //inicializa o display LCD 
....................   inic_display(); 
14D0:  GOTO   0540
....................  
....................   while (true) 
....................   { 
....................  
....................     switch(tela){ 
14D4:  MOVF   0D,W
14D6:  BZ    14E2
14D8:  XORLW  01
14DA:  BZ    151C
14DC:  XORLW  03
14DE:  BZ    1522
14E0:  BRA    1524
....................       case 0: 
....................         display(0,0x01); 
14E2:  CLRF   23
14E4:  MOVLW  01
14E6:  MOVWF  24
14E8:  CALL   04C4
....................         update_clock(); 
14EC:  GOTO   0682
....................         read_temperature(); 
14F0:  CALL   0A3C
....................         //check_temperature(); 
....................         show_temperature(); 
14F4:  BRA    0D06
....................         show_clock(); 
14F6:  BRA    0E4C
....................  
....................         if(TECLA_SET) 
14F8:  BSF    F95.0
14FA:  BTFSC  F83.0
14FC:  BRA    1504
....................           tela = 1; 
14FE:  MOVLW  01
1500:  MOVWF  0D
....................         else if(TECLA_MAIS) 
1502:  BRA    151A
1504:  BSF    F95.3
1506:  BTFSC  F83.3
1508:  BRA    1510
....................           tela = 1; 
150A:  MOVLW  01
150C:  MOVWF  0D
....................         else if (TECLA_MENOS) 
150E:  BRA    151A
1510:  BSF    F95.2
1512:  BTFSC  F83.2
1514:  BRA    151A
....................           tela = 2; 
1516:  MOVLW  02
1518:  MOVWF  0D
....................  
....................         break; 
151A:  BRA    1524
....................       case 1: 
....................         read_temperature(); 
151C:  CALL   0A3C
....................         configure_temperature(); 
1520:  BRA    0EB2
....................         break; 
....................       case 2: 
....................         //update_clock(); 
....................         configure_time(); 
1522:  BRA    1062
....................         break; 
....................     } 
....................  
.................... //alterna o estado do pino D4 
....................     output_toggle(PIN_D1); 
1524:  BCF    F95.1
1526:  BTG    F8C.1
....................  
.................... //aguarda 500ms 
....................     delay_ms (200); 
1528:  MOVLW  C8
152A:  MOVWF  14
152C:  CALL   0484
....................   } 
1530:  BRA    14D4
.................... } 
....................  
.................... read_temperature() { 
....................   long int adc; 
1532:  SLEEP 
.................... //starts the conversion and reads the result 
....................   adc = read_adc(); 
*
0A3C:  BSF    FC2.2
0A3E:  BTFSC  FC2.2
0A40:  BRA    0A3E
0A42:  MOVFF  FC3,14
0A46:  MOVFF  FC4,15
.................... //faz o calculo para converter a tensao em graus celsius 
....................   temperatura = adc * 0.0488;//((temp - 50) * 8.9)/ 100; 
0A4A:  MOVFF  15,17
0A4E:  MOVFF  14,16
0A52:  BRA    081A
0A54:  MOVFF  03,25
0A58:  MOVFF  02,24
0A5C:  MOVFF  01,23
0A60:  MOVFF  00,22
0A64:  MOVLW  82
0A66:  MOVWF  29
0A68:  MOVLW  E2
0A6A:  MOVWF  28
0A6C:  MOVLW  47
0A6E:  MOVWF  27
0A70:  MOVLW  7A
0A72:  MOVWF  26
0A74:  RCALL  0852
0A76:  MOVFF  03,11
0A7A:  MOVFF  02,10
0A7E:  MOVFF  01,0F
0A82:  MOVFF  00,0E
....................   //envia o cursor do LCD para a posicao 0,0 
....................   display(0,0xA0); 
0A86:  CLRF   23
0A88:  MOVLW  A0
0A8A:  MOVWF  24
0A8C:  RCALL  04C4
.................... //imprime na tela a temperatura 
....................   printf(mostra,"ADC: %ld    ",adc); 
0A8E:  CLRF   16
0A90:  MOVF   16,W
0A92:  CALL   0004
0A96:  INCF   16,F
0A98:  MOVWF  00
0A9A:  MOVWF  22
0A9C:  RCALL  0944
0A9E:  MOVLW  05
0AA0:  SUBWF  16,W
0AA2:  BNZ   0A90
0AA4:  MOVLW  10
0AA6:  MOVWF  FE9
0AA8:  MOVFF  15,18
0AAC:  MOVFF  14,17
0AB0:  BRA    0950
0AB2:  MOVLW  08
0AB4:  MOVWF  17
0AB6:  MOVF   17,W
0AB8:  CALL   0004
0ABC:  INCF   17,F
0ABE:  MOVWF  00
0AC0:  MOVWF  22
0AC2:  RCALL  0944
0AC4:  MOVLW  0C
0AC6:  SUBWF  17,W
0AC8:  BNZ   0AB6
.................... } 
0ACA:  RETLW  00
....................  
.................... show_temperature(){ 
.................... //envia o cursor do LCD para a posicao 0,0 
....................   display(0,0x80); 
*
0D06:  CLRF   23
0D08:  MOVLW  80
0D0A:  MOVWF  24
0D0C:  CALL   04C4
.................... //imprime na tela a temperatura 
....................   printf(mostra,"Temperatura: %.1lfC    ",temperatura); 
0D10:  CLRF   14
0D12:  MOVF   14,W
0D14:  CALL   0022
0D18:  INCF   14,F
0D1A:  MOVWF  00
0D1C:  MOVWF  22
0D1E:  RCALL  0944
0D20:  MOVLW  0D
0D22:  SUBWF  14,W
0D24:  BNZ   0D12
0D26:  MOVLW  89
0D28:  MOVWF  FE9
0D2A:  MOVFF  11,18
0D2E:  MOVFF  10,17
0D32:  MOVFF  0F,16
0D36:  MOVFF  0E,15
0D3A:  MOVLW  01
0D3C:  MOVWF  19
0D3E:  BRA    0B86
0D40:  MOVLW  12
0D42:  MOVWF  15
0D44:  MOVF   15,W
0D46:  CALL   0022
0D4A:  INCF   15,F
0D4C:  MOVWF  00
0D4E:  MOVWF  22
0D50:  RCALL  0944
0D52:  MOVLW  17
0D54:  SUBWF  15,W
0D56:  BNZ   0D44
.................... } 
0D58:  GOTO   14F6 (RETURN)
....................  
.................... update_clock(){ 
....................  
....................   ds1307_get_date(day,month,yr,dow);  
....................   ds1307_get_time(hrs,min,sec);  
....................  
....................   sec = ds1307_read_byte(0); 
*
0804:  CLRF   14
0806:  BRA    05E8
0808:  MOVFF  01,05
....................   sec = bcd2bin(sec); 
080C:  MOVFF  05,1A
0810:  RCALL  0302
0812:  MOVFF  01,05
....................  
.................... } 
0816:  GOTO   14F0 (RETURN)
....................  
.................... show_clock(){ 
....................  
.................... //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0xC0); 
*
0E4C:  CLRF   23
0E4E:  MOVLW  C0
0E50:  MOVWF  24
0E52:  CALL   04C4
....................  
.................... //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"Hora: \%02d:\%02d:\%02d     ", hrs,min,sec);  
0E56:  CLRF   14
0E58:  MOVF   14,W
0E5A:  CALL   004A
0E5E:  INCF   14,F
0E60:  MOVWF  00
0E62:  MOVWF  22
0E64:  RCALL  0944
0E66:  MOVLW  06
0E68:  SUBWF  14,W
0E6A:  BNZ   0E58
0E6C:  MOVFF  07,15
0E70:  MOVLW  01
0E72:  MOVWF  16
0E74:  RCALL  0D84
0E76:  MOVLW  3A
0E78:  MOVWF  22
0E7A:  RCALL  0944
0E7C:  MOVFF  06,15
0E80:  MOVLW  01
0E82:  MOVWF  16
0E84:  RCALL  0D84
0E86:  MOVLW  3A
0E88:  MOVWF  22
0E8A:  RCALL  0944
0E8C:  MOVFF  05,15
0E90:  MOVLW  01
0E92:  MOVWF  16
0E94:  RCALL  0D84
0E96:  MOVLW  14
0E98:  MOVWF  15
0E9A:  MOVF   15,W
0E9C:  CALL   004A
0EA0:  INCF   15,F
0EA2:  MOVWF  00
0EA4:  MOVWF  22
0EA6:  RCALL  0944
0EA8:  MOVLW  19
0EAA:  SUBWF  15,W
0EAC:  BNZ   0E9A
.................... } 
0EAE:  GOTO   14F8 (RETURN)
....................  
....................  
.................... configure_time() { 
....................   static int state = 0; 
....................  
....................   //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0x80); 
*
1062:  CLRF   23
1064:  MOVLW  80
1066:  MOVWF  24
1068:  CALL   04C4
....................   //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"Config Relogio    "); 
106C:  CLRF   14
106E:  MOVF   14,W
1070:  CALL   0074
1074:  INCF   14,F
1076:  MOVWF  00
1078:  MOVWF  22
107A:  RCALL  0944
107C:  MOVLW  12
107E:  SUBWF  14,W
1080:  BNZ   106E
....................  
....................   //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0xC0); 
1082:  CLRF   23
1084:  MOVLW  C0
1086:  MOVWF  24
1088:  CALL   04C4
....................   //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"H\%02d:\%02d:\%02d D\%02d/\%02d/\%02d    ", hrs,min,sec,day,month,yr);  
108C:  MOVLW  48
108E:  MOVWF  22
1090:  RCALL  0944
1092:  MOVFF  07,15
1096:  MOVLW  01
1098:  MOVWF  16
109A:  RCALL  0D84
109C:  MOVLW  3A
109E:  MOVWF  22
10A0:  RCALL  0944
10A2:  MOVFF  06,15
10A6:  MOVLW  01
10A8:  MOVWF  16
10AA:  RCALL  0D84
10AC:  MOVLW  3A
10AE:  MOVWF  22
10B0:  RCALL  0944
10B2:  MOVFF  05,15
10B6:  MOVLW  01
10B8:  MOVWF  16
10BA:  RCALL  0D84
10BC:  MOVLW  20
10BE:  MOVWF  22
10C0:  RCALL  0944
10C2:  MOVLW  44
10C4:  MOVWF  22
10C6:  RCALL  0944
10C8:  MOVFF  08,15
10CC:  MOVLW  01
10CE:  MOVWF  16
10D0:  RCALL  0D84
10D2:  MOVLW  2F
10D4:  MOVWF  22
10D6:  RCALL  0944
10D8:  MOVFF  09,15
10DC:  MOVLW  01
10DE:  MOVWF  16
10E0:  RCALL  0D84
10E2:  MOVLW  2F
10E4:  MOVWF  22
10E6:  RCALL  0944
10E8:  MOVFF  0A,15
10EC:  MOVLW  01
10EE:  MOVWF  16
10F0:  RCALL  0D84
10F2:  MOVLW  1F
10F4:  MOVWF  14
10F6:  MOVF   14,W
10F8:  CALL   0098
10FC:  INCF   14,F
10FE:  MOVWF  00
1100:  MOVWF  22
1102:  RCALL  0944
1104:  MOVLW  23
1106:  SUBWF  14,W
1108:  BNZ   10F6
....................  
....................  
....................   switch(state){ 
110A:  MOVF   12,W
110C:  ADDLW  F8
110E:  BTFSC  FD8.0
1110:  BRA    1460
1112:  ADDLW  08
1114:  GOTO   1464
....................     case 0: //menu superior 
....................       if(TECLA_SET) 
1118:  BSF    F95.0
111A:  BTFSC  F83.0
111C:  BRA    1124
....................         state = 1; 
111E:  MOVLW  01
1120:  MOVWF  12
....................       else if(TECLA_MAIS) 
1122:  BRA    1138
1124:  BSF    F95.3
1126:  BTFSC  F83.3
1128:  BRA    112E
....................         tela = 0; 
112A:  CLRF   0D
....................       else if(TECLA_MENOS) 
112C:  BRA    1138
112E:  BSF    F95.2
1130:  BTFSC  F83.2
1132:  BRA    1138
....................         tela = 1; 
1134:  MOVLW  01
1136:  MOVWF  0D
....................       break; 
1138:  BRA    1460
....................  
....................     case 1: //hora 
....................       display(0,0xC0); 
113A:  CLRF   23
113C:  MOVLW  C0
113E:  MOVWF  24
1140:  CALL   04C4
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Horas:\%02d            ", hrs); 
1144:  CLRF   14
1146:  MOVF   14,W
1148:  CALL   00CC
114C:  INCF   14,F
114E:  MOVWF  00
1150:  MOVWF  22
1152:  CALL   0944
1156:  MOVLW  06
1158:  SUBWF  14,W
115A:  BNZ   1146
115C:  MOVFF  07,15
1160:  MOVLW  01
1162:  MOVWF  16
1164:  RCALL  0D84
1166:  MOVLW  0A
1168:  MOVWF  15
116A:  MOVF   15,W
116C:  CALL   00CC
1170:  INCF   15,F
1172:  MOVWF  00
1174:  MOVWF  22
1176:  CALL   0944
117A:  MOVLW  16
117C:  SUBWF  15,W
117E:  BNZ   116A
....................       if(TECLA_SET) 
1180:  BSF    F95.0
1182:  BTFSC  F83.0
1184:  BRA    118C
....................         state = 2; 
1186:  MOVLW  02
1188:  MOVWF  12
....................       else if(TECLA_MAIS){ 
118A:  BRA    11B0
118C:  BSF    F95.3
118E:  BTFSC  F83.3
1190:  BRA    119E
....................         hrs++; 
1192:  INCF   07,F
....................         if(hrs > 23) 
1194:  MOVF   07,W
1196:  SUBLW  17
1198:  BC    119C
....................           hrs = 0; 
119A:  CLRF   07
....................       } 
....................       else if(TECLA_MENOS){ 
119C:  BRA    11B0
119E:  BSF    F95.2
11A0:  BTFSC  F83.2
11A2:  BRA    11B0
....................         hrs--; 
11A4:  DECF   07,F
....................         if(hrs == -1) 
11A6:  MOVF   07,W
11A8:  SUBLW  FF
11AA:  BNZ   11B0
....................           hrs = 23; 
11AC:  MOVLW  17
11AE:  MOVWF  07
....................       } 
....................       break; 
11B0:  BRA    1460
....................     case 2: //minuto 
....................       display(0,0xC0); 
11B2:  CLRF   23
11B4:  MOVLW  C0
11B6:  MOVWF  24
11B8:  CALL   04C4
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Minutos:\%02d         ", min); 
11BC:  CLRF   14
11BE:  MOVF   14,W
11C0:  CALL   00F4
11C4:  INCF   14,F
11C6:  MOVWF  00
11C8:  MOVWF  22
11CA:  CALL   0944
11CE:  MOVLW  08
11D0:  SUBWF  14,W
11D2:  BNZ   11BE
11D4:  MOVFF  06,15
11D8:  MOVLW  01
11DA:  MOVWF  16
11DC:  RCALL  0D84
11DE:  MOVLW  0C
11E0:  MOVWF  15
11E2:  MOVF   15,W
11E4:  CALL   00F4
11E8:  INCF   15,F
11EA:  MOVWF  00
11EC:  MOVWF  22
11EE:  CALL   0944
11F2:  MOVLW  15
11F4:  SUBWF  15,W
11F6:  BNZ   11E2
....................       if(TECLA_SET) 
11F8:  BSF    F95.0
11FA:  BTFSC  F83.0
11FC:  BRA    1204
....................         state = 3; 
11FE:  MOVLW  03
1200:  MOVWF  12
....................       else if(TECLA_MAIS){ 
1202:  BRA    1228
1204:  BSF    F95.3
1206:  BTFSC  F83.3
1208:  BRA    1216
....................         min++; 
120A:  INCF   06,F
....................         if(min > 59) 
120C:  MOVF   06,W
120E:  SUBLW  3B
1210:  BC    1214
....................           min = 0; 
1212:  CLRF   06
....................       } 
....................       else if(TECLA_MENOS){ 
1214:  BRA    1228
1216:  BSF    F95.2
1218:  BTFSC  F83.2
121A:  BRA    1228
....................         min--; 
121C:  DECF   06,F
....................         if(min == -1) 
121E:  MOVF   06,W
1220:  SUBLW  FF
1222:  BNZ   1228
....................           min = 59; 
1224:  MOVLW  3B
1226:  MOVWF  06
....................       } 
....................       break; 
1228:  BRA    1460
....................     case 3: //segundo 
....................       display(0,0xC0); 
122A:  CLRF   23
122C:  MOVLW  C0
122E:  MOVWF  24
1230:  CALL   04C4
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Segundos:\%02d            ", sec); 
1234:  CLRF   14
1236:  MOVF   14,W
1238:  CALL   011A
123C:  INCF   14,F
123E:  MOVWF  00
1240:  MOVWF  22
1242:  CALL   0944
1246:  MOVLW  09
1248:  SUBWF  14,W
124A:  BNZ   1236
124C:  MOVFF  05,15
1250:  MOVLW  01
1252:  MOVWF  16
1254:  RCALL  0D84
1256:  MOVLW  0D
1258:  MOVWF  15
125A:  MOVF   15,W
125C:  CALL   011A
1260:  INCF   15,F
1262:  MOVWF  00
1264:  MOVWF  22
1266:  CALL   0944
126A:  MOVLW  19
126C:  SUBWF  15,W
126E:  BNZ   125A
....................       if(TECLA_SET) 
1270:  BSF    F95.0
1272:  BTFSC  F83.0
1274:  BRA    127C
....................         state = 4; 
1276:  MOVLW  04
1278:  MOVWF  12
....................       else if(TECLA_MAIS){ 
127A:  BRA    12A0
127C:  BSF    F95.3
127E:  BTFSC  F83.3
1280:  BRA    128E
....................         sec++; 
1282:  INCF   05,F
....................         if(sec > 59) 
1284:  MOVF   05,W
1286:  SUBLW  3B
1288:  BC    128C
....................           sec = 0; 
128A:  CLRF   05
....................       } 
....................       else if(TECLA_MENOS){ 
128C:  BRA    12A0
128E:  BSF    F95.2
1290:  BTFSC  F83.2
1292:  BRA    12A0
....................         sec--; 
1294:  DECF   05,F
....................         if(sec == -1) 
1296:  MOVF   05,W
1298:  SUBLW  FF
129A:  BNZ   12A0
....................           sec = 59; 
129C:  MOVLW  3B
129E:  MOVWF  05
....................       } 
....................       break; 
12A0:  BRA    1460
....................     case 4: //dia 
....................       display(0,0xC0); 
12A2:  CLRF   23
12A4:  MOVLW  C0
12A6:  MOVWF  24
12A8:  CALL   04C4
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Dia:\%02d            ", day); 
12AC:  CLRF   14
12AE:  MOVF   14,W
12B0:  CALL   0144
12B4:  INCF   14,F
12B6:  MOVWF  00
12B8:  MOVWF  22
12BA:  CALL   0944
12BE:  MOVLW  04
12C0:  SUBWF  14,W
12C2:  BNZ   12AE
12C4:  MOVFF  08,15
12C8:  MOVLW  01
12CA:  MOVWF  16
12CC:  RCALL  0D84
12CE:  MOVLW  08
12D0:  MOVWF  15
12D2:  MOVF   15,W
12D4:  CALL   0144
12D8:  INCF   15,F
12DA:  MOVWF  00
12DC:  MOVWF  22
12DE:  CALL   0944
12E2:  MOVLW  14
12E4:  SUBWF  15,W
12E6:  BNZ   12D2
....................       if(TECLA_SET) 
12E8:  BSF    F95.0
12EA:  BTFSC  F83.0
12EC:  BRA    12F4
....................         state = 5; 
12EE:  MOVLW  05
12F0:  MOVWF  12
....................       else if(TECLA_MAIS){ 
12F2:  BRA    1318
12F4:  BSF    F95.3
12F6:  BTFSC  F83.3
12F8:  BRA    1308
....................         day++; 
12FA:  INCF   08,F
....................         if(day > 31) 
12FC:  MOVF   08,W
12FE:  SUBLW  1F
1300:  BC    1306
....................           day = 1; 
1302:  MOVLW  01
1304:  MOVWF  08
....................       } 
....................       else if(TECLA_MENOS){ 
1306:  BRA    1318
1308:  BSF    F95.2
130A:  BTFSC  F83.2
130C:  BRA    1318
....................         day--; 
130E:  DECF   08,F
....................         if(day < 1) 
1310:  MOVF   08,F
1312:  BNZ   1318
....................           day = 31; 
1314:  MOVLW  1F
1316:  MOVWF  08
....................       } 
....................       break; 
1318:  BRA    1460
....................     case 5: //mes 
....................       display(0,0xC0); 
131A:  CLRF   23
131C:  MOVLW  C0
131E:  MOVWF  24
1320:  CALL   04C4
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Mes:\%02d            ", month); 
1324:  CLRF   14
1326:  MOVF   14,W
1328:  CALL   016A
132C:  INCF   14,F
132E:  MOVWF  00
1330:  MOVWF  22
1332:  CALL   0944
1336:  MOVLW  04
1338:  SUBWF  14,W
133A:  BNZ   1326
133C:  MOVFF  09,15
1340:  MOVLW  01
1342:  MOVWF  16
1344:  RCALL  0D84
1346:  MOVLW  08
1348:  MOVWF  15
134A:  MOVF   15,W
134C:  CALL   016A
1350:  INCF   15,F
1352:  MOVWF  00
1354:  MOVWF  22
1356:  CALL   0944
135A:  MOVLW  14
135C:  SUBWF  15,W
135E:  BNZ   134A
....................       if(TECLA_SET) 
1360:  BSF    F95.0
1362:  BTFSC  F83.0
1364:  BRA    136C
....................         state = 6; 
1366:  MOVLW  06
1368:  MOVWF  12
....................       else if(TECLA_MAIS){ 
136A:  BRA    1390
136C:  BSF    F95.3
136E:  BTFSC  F83.3
1370:  BRA    1380
....................         month++; 
1372:  INCF   09,F
....................         if(month > 12) 
1374:  MOVF   09,W
1376:  SUBLW  0C
1378:  BC    137E
....................           month = 1; 
137A:  MOVLW  01
137C:  MOVWF  09
....................       } 
....................       else if(TECLA_MENOS){ 
137E:  BRA    1390
1380:  BSF    F95.2
1382:  BTFSC  F83.2
1384:  BRA    1390
....................         month--; 
1386:  DECF   09,F
....................         if(month < 1) 
1388:  MOVF   09,F
138A:  BNZ   1390
....................           month = 12; 
138C:  MOVLW  0C
138E:  MOVWF  09
....................       } 
....................       break; 
1390:  BRA    1460
....................     case 6: //ano 
....................       display(0,0xC0); 
1392:  CLRF   23
1394:  MOVLW  C0
1396:  MOVWF  24
1398:  CALL   04C4
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Ano:\%02d            ", yr); 
139C:  CLRF   14
139E:  MOVF   14,W
13A0:  CALL   0190
13A4:  INCF   14,F
13A6:  MOVWF  00
13A8:  MOVWF  22
13AA:  CALL   0944
13AE:  MOVLW  04
13B0:  SUBWF  14,W
13B2:  BNZ   139E
13B4:  MOVFF  0A,15
13B8:  MOVLW  01
13BA:  MOVWF  16
13BC:  RCALL  0D84
13BE:  MOVLW  08
13C0:  MOVWF  15
13C2:  MOVF   15,W
13C4:  CALL   0190
13C8:  INCF   15,F
13CA:  MOVWF  00
13CC:  MOVWF  22
13CE:  CALL   0944
13D2:  MOVLW  14
13D4:  SUBWF  15,W
13D6:  BNZ   13C2
....................       if(TECLA_SET) 
13D8:  BSF    F95.0
13DA:  BTFSC  F83.0
13DC:  BRA    13E4
....................         state = 7; 
13DE:  MOVLW  07
13E0:  MOVWF  12
....................       else if(TECLA_MAIS){ 
13E2:  BRA    1406
13E4:  BSF    F95.3
13E6:  BTFSC  F83.3
13E8:  BRA    13F6
....................         yr++; 
13EA:  INCF   0A,F
....................         if(yr > 30) 
13EC:  MOVF   0A,W
13EE:  SUBLW  1E
13F0:  BC    13F4
....................           yr = 0; 
13F2:  CLRF   0A
....................       } 
....................       else if(TECLA_MENOS){ 
13F4:  BRA    1406
13F6:  BSF    F95.2
13F8:  BTFSC  F83.2
13FA:  BRA    1406
....................         yr--; 
13FC:  DECF   0A,F
....................         if(yr < 1) 
13FE:  MOVF   0A,F
1400:  BNZ   1406
....................           yr = 30; 
1402:  MOVLW  1E
1404:  MOVWF  0A
....................       } 
....................       break; 
1406:  BRA    1460
....................     case 7: //mes 
....................  
....................       //envia o cursor do LCD para a posicao 1,0 
....................       display(0,0xC0); 
1408:  CLRF   23
140A:  MOVLW  C0
140C:  MOVWF  24
140E:  CALL   04C4
....................       //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................       printf(mostra,"Salvar? + SIM, - NAO");  
1412:  CLRF   14
1414:  MOVF   14,W
1416:  CALL   01B6
141A:  INCF   14,F
141C:  MOVWF  00
141E:  MOVWF  22
1420:  CALL   0944
1424:  MOVLW  14
1426:  SUBWF  14,W
1428:  BNZ   1414
....................       if(TECLA_MAIS){ 
142A:  BSF    F95.3
142C:  BTFSC  F83.3
142E:  BRA    1454
....................         ds1307_set_date_time(day,month,yr,dow,hrs,min,sec); 
1430:  MOVFF  08,14
1434:  MOVFF  09,15
1438:  MOVFF  0A,16
143C:  MOVFF  0B,17
1440:  MOVFF  07,18
1444:  MOVFF  06,19
1448:  MOVFF  05,1A
144C:  BRA    0F72
....................         tela = 0; 
144E:  CLRF   0D
....................         state = 0; 
1450:  CLRF   12
....................       } 
....................       else if(TECLA_MENOS){ 
1452:  BRA    145E
1454:  BSF    F95.2
1456:  BTFSC  F83.2
1458:  BRA    145E
....................         state = 0; 
145A:  CLRF   12
....................         tela = 0; 
145C:  CLRF   0D
....................       } 
....................       break; 
145E:  BRA    1460
....................     } 
....................  
.................... } 
1460:  GOTO   1524 (RETURN)
....................  
.................... configure_temperature() { 
....................   static int state; 
....................  
....................   //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0x80); 
*
0EB2:  CLRF   23
0EB4:  MOVLW  80
0EB6:  MOVWF  24
0EB8:  CALL   04C4
....................   //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"Config Temperatura    "); 
0EBC:  CLRF   14
0EBE:  MOVF   14,W
0EC0:  CALL   01DC
0EC4:  INCF   14,F
0EC6:  MOVWF  00
0EC8:  MOVWF  22
0ECA:  RCALL  0944
0ECC:  MOVLW  16
0ECE:  SUBWF  14,W
0ED0:  BNZ   0EBE
....................  
....................   //envia o cursor do LCD para a posicao 1,0 
....................   display(0,0xC0); 
0ED2:  CLRF   23
0ED4:  MOVLW  C0
0ED6:  MOVWF  24
0ED8:  CALL   04C4
....................   //printf(mostra,"\f\%02d/\%02d/\%02d\r\n",day,month,yr);  
....................   printf(mostra,"Temp Max: \%02d             ", temperatura_maxima);  
0EDC:  CLRF   14
0EDE:  MOVF   14,W
0EE0:  CALL   0204
0EE4:  INCF   14,F
0EE6:  MOVWF  00
0EE8:  MOVWF  22
0EEA:  RCALL  0944
0EEC:  MOVLW  0A
0EEE:  SUBWF  14,W
0EF0:  BNZ   0EDE
0EF2:  MOVFF  0C,15
0EF6:  MOVLW  01
0EF8:  MOVWF  16
0EFA:  RCALL  0D84
0EFC:  MOVLW  0E
0EFE:  MOVWF  15
0F00:  MOVF   15,W
0F02:  CALL   0204
0F06:  INCF   15,F
0F08:  MOVWF  00
0F0A:  MOVWF  22
0F0C:  RCALL  0944
0F0E:  MOVLW  1B
0F10:  SUBWF  15,W
0F12:  BNZ   0F00
....................  
....................   switch(state){ 
0F14:  MOVF   13,W
0F16:  BZ    0F1E
0F18:  XORLW  01
0F1A:  BZ    0F40
0F1C:  BRA    0F6E
....................   case 0: //menu superior 
....................     if(TECLA_SET) 
0F1E:  BSF    F95.0
0F20:  BTFSC  F83.0
0F22:  BRA    0F2A
....................       state = 1; 
0F24:  MOVLW  01
0F26:  MOVWF  13
....................     else if(TECLA_MAIS) 
0F28:  BRA    0F3E
0F2A:  BSF    F95.3
0F2C:  BTFSC  F83.3
0F2E:  BRA    0F36
....................       tela = 2; 
0F30:  MOVLW  02
0F32:  MOVWF  0D
....................     else if(TECLA_MENOS) 
0F34:  BRA    0F3E
0F36:  BSF    F95.2
0F38:  BTFSC  F83.2
0F3A:  BRA    0F3E
....................       tela = 0; 
0F3C:  CLRF   0D
....................     break; 
0F3E:  BRA    0F6E
....................  
....................   case 1: //temperatura maxima 
....................     if(TECLA_SET) 
0F40:  BSF    F95.0
0F42:  BTFSC  F83.0
0F44:  BRA    0F4A
....................       state = 0; 
0F46:  CLRF   13
....................     else if(TECLA_MAIS){ 
0F48:  BRA    0F6C
0F4A:  BSF    F95.3
0F4C:  BTFSC  F83.3
0F4E:  BRA    0F5C
....................       temperatura_maxima++; 
0F50:  INCF   0C,F
....................       if(temperatura_maxima > 100) 
0F52:  MOVF   0C,W
0F54:  SUBLW  64
0F56:  BC    0F5A
....................         temperatura_maxima = 0; 
0F58:  CLRF   0C
....................     } 
....................     else if(TECLA_MENOS){ 
0F5A:  BRA    0F6C
0F5C:  BSF    F95.2
0F5E:  BTFSC  F83.2
0F60:  BRA    0F6C
....................       temperatura_maxima--; 
0F62:  DECF   0C,F
....................       if(temperatura_maxima < 1) 
0F64:  MOVF   0C,F
0F66:  BNZ   0F6C
....................         temperatura_maxima = 100; 
0F68:  MOVLW  64
0F6A:  MOVWF  0C
....................     } 
....................     break; 
0F6C:  BRA    0F6E
....................   } 
.................... } 
0F6E:  GOTO   1524 (RETURN)

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   BROWNOUT WDT128 NOWDT BORV20 PUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
