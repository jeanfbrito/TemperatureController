CCS PCH C Compiler, Version 4.057, 8241               19-mai-13 22:14

               Filename: teclas.lst

               ROM used: 1934 bytes (6%)
                         Largest free fragment is 30834
               RAM used: 17 (1%) at main() level
                         28 (2%) worst case
               Stack:    3 locations

*
0000:  GOTO   0524
.................... #include <18f452.h> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(clock=20000000) 
*
00FE:  CLRF   FEA
0100:  MOVLW  0C
0102:  MOVWF  FE9
0104:  MOVF   FEF,W
0106:  BZ    0122
0108:  MOVLW  06
010A:  MOVWF  01
010C:  CLRF   00
010E:  DECFSZ 00,F
0110:  BRA    010E
0112:  DECFSZ 01,F
0114:  BRA    010C
0116:  MOVLW  7B
0118:  MOVWF  00
011A:  DECFSZ 00,F
011C:  BRA    011A
011E:  DECFSZ FEF,F
0120:  BRA    0108
0122:  RETLW  00
0124:  MOVLW  03
0126:  SUBWF  0C,F
0128:  BNC   013C
012A:  CLRF   FEA
012C:  MOVLW  0C
012E:  MOVWF  FE9
0130:  MOVF   FEF,W
0132:  BZ    013C
0134:  BRA    0138
0136:  BRA    0138
0138:  DECFSZ FEF,F
013A:  BRA    0136
013C:  RETLW  00
.................... #fuses HS,NOWDT,PUT 
.................... #include <lcd_generico.c> 
.................... /* 
....................  
.................... Função para utilização do display LCD para qualquer tamanho 
....................  
....................    inic_display();                        função para configurar e inicializar o display 
....................    display(char tipo,char dado);          função para enviar um comando ou um dado para o display 
....................    mostra(char dado);                     funçao para enviar um dado para o display 
....................  
....................    Configuração dos pinos do microcontrolador 
....................  
....................    RB0 = enable display 
....................    RB1 = RS 
....................    RB2 = RW 
....................    RB3 = 
....................    RB4 = DB4 
....................    RB5 = DB5 
....................    RB6 = DB6 
....................    RB7 = DB7 
....................  
....................    Primeira linha = 0x80 
....................    Segunda  linha = 0xC0 
....................    Terceira linha = 0x94 
....................    Quarta linha   = 0xD4 
....................  
.................... Aprimorado por Cleber Toss Hoffmann 
.................... cleber.toss.hoffmann@gmail.com 
....................  
.................... */ 
.................... // 
.................... #byte PORTB=0xF81 
.................... #byte TRISB=0xF93 
....................  
.................... //Constantes 
.................... #define set_bit0 0x01 
.................... #define set_bit1 0x02 
.................... #define set_bit2 0x04 
....................  
.................... #define clear_bit0 0xfe 
.................... #define clear_bit1 0xfd 
.................... #define clear_bit2 0xfb 
....................  
.................... void inic_display(); 
....................  
.................... #separate 
.................... void display(char tipo,char dado); 
....................  
.................... #separate 
.................... void mostra(char dado); 
....................  
.................... void inic_display() 
.................... { 
....................  TRISB =0x00; 
*
01BA:  CLRF   F93
....................  delay_ms(50); 
01BC:  MOVLW  32
01BE:  MOVWF  0C
01C0:  RCALL  00FE
....................  
....................  PORTB  = 0x30; 
01C2:  MOVLW  30
01C4:  MOVWF  F81
....................  PORTB |= set_bit0; 
01C6:  BSF    F81.0
....................  delay_us(5); 
01C8:  MOVLW  08
01CA:  MOVWF  00
01CC:  DECFSZ 00,F
01CE:  BRA    01CC
....................  PORTB &= clear_bit0; 
01D0:  BCF    F81.0
....................  delay_ms(25); 
01D2:  MOVLW  19
01D4:  MOVWF  0C
01D6:  RCALL  00FE
....................  
....................  PORTB = 0x30; 
01D8:  MOVLW  30
01DA:  MOVWF  F81
....................  PORTB |= set_bit0; 
01DC:  BSF    F81.0
....................  delay_us(5); 
01DE:  MOVLW  08
01E0:  MOVWF  00
01E2:  DECFSZ 00,F
01E4:  BRA    01E2
....................  PORTB &= clear_bit0; 
01E6:  BCF    F81.0
....................  delay_ms(25); 
01E8:  MOVLW  19
01EA:  MOVWF  0C
01EC:  RCALL  00FE
....................  
....................  PORTB = 0x30; 
01EE:  MOVLW  30
01F0:  MOVWF  F81
....................  PORTB |= set_bit0; 
01F2:  BSF    F81.0
....................  delay_us(5); 
01F4:  MOVLW  08
01F6:  MOVWF  00
01F8:  DECFSZ 00,F
01FA:  BRA    01F8
....................  PORTB &= clear_bit0; 
01FC:  BCF    F81.0
....................  delay_ms(25); 
01FE:  MOVLW  19
0200:  MOVWF  0C
0202:  RCALL  00FE
....................  
....................  PORTB = 0x30; 
0204:  MOVLW  30
0206:  MOVWF  F81
....................  PORTB |= set_bit0; 
0208:  BSF    F81.0
....................  delay_us(5); 
020A:  MOVLW  08
020C:  MOVWF  00
020E:  DECFSZ 00,F
0210:  BRA    020E
....................  PORTB &= clear_bit0; 
0212:  BCF    F81.0
....................  
....................  delay_us(200); 
0214:  MOVLW  C8
0216:  MOVWF  0C
0218:  RCALL  0124
....................  PORTB = 0x20; 
021A:  MOVLW  20
021C:  MOVWF  F81
....................  PORTB |= set_bit0; 
021E:  BSF    F81.0
....................  delay_us(5); 
0220:  MOVLW  08
0222:  MOVWF  00
0224:  DECFSZ 00,F
0226:  BRA    0224
....................  PORTB &= clear_bit0; 
0228:  BCF    F81.0
....................  
....................  delay_us(200); 
022A:  MOVLW  C8
022C:  MOVWF  0C
022E:  RCALL  0124
....................  display(0,0x28); 
0230:  CLRF   18
0232:  MOVLW  28
0234:  MOVWF  19
0236:  RCALL  013E
....................  display(0,0x08); 
0238:  CLRF   18
023A:  MOVLW  08
023C:  MOVWF  19
023E:  RCALL  013E
....................  display(0,0x01); 
0240:  CLRF   18
0242:  MOVLW  01
0244:  MOVWF  19
0246:  RCALL  013E
....................  delay_ms(5); 
0248:  MOVLW  05
024A:  MOVWF  0C
024C:  RCALL  00FE
....................  display(0,0x06); 
024E:  CLRF   18
0250:  MOVLW  06
0252:  MOVWF  19
0254:  RCALL  013E
....................  display(0,0x0c); 
0256:  CLRF   18
0258:  MOVLW  0C
025A:  MOVWF  19
025C:  RCALL  013E
....................  
.................... } 
025E:  GOTO   0550 (RETURN)
....................  
....................  
.................... /* display 
....................    Envia um dado para o display. 
....................    Se tipo=0, é um comando (RS=0) 
....................    Se tipo=1, é um dado (RS=1) 
.................... */ 
.................... #separate 
.................... void display(char tipo,char dado) 
.................... { 
....................  char temp; 
....................  if(tipo == true) 
*
013E:  DECFSZ 18,W
0140:  BRA    0182
....................     { 
....................      temp=(dado & 0xf0) | set_bit1; 
0142:  MOVF   19,W
0144:  ANDLW  F0
0146:  IORLW  02
0148:  MOVWF  1A
....................      PORTB = temp; 
014A:  MOVFF  1A,F81
....................      PORTB |= set_bit0; 
014E:  BSF    F81.0
....................      delay_us(5); 
0150:  MOVLW  08
0152:  MOVWF  00
0154:  DECFSZ 00,F
0156:  BRA    0154
....................      PORTB &= clear_bit0; 
0158:  BCF    F81.0
.................... //   delay_us(50); 
....................      temp=(dado << 4) | set_bit1; 
015A:  SWAPF  19,W
015C:  MOVWF  00
015E:  MOVLW  F0
0160:  ANDWF  00,F
0162:  MOVF   00,W
0164:  IORLW  02
0166:  MOVWF  1A
....................      PORTB = temp; 
0168:  MOVFF  1A,F81
....................      PORTB |= set_bit0; 
016C:  BSF    F81.0
....................      delay_us(5); 
016E:  MOVLW  08
0170:  MOVWF  00
0172:  DECFSZ 00,F
0174:  BRA    0172
....................      PORTB &= clear_bit0; 
0176:  BCF    F81.0
....................      delay_us(50); 
0178:  MOVLW  53
017A:  MOVWF  00
017C:  DECFSZ 00,F
017E:  BRA    017C
....................  
....................     } 
....................  else 
0180:  BRA    01B8
....................     { 
....................      temp=(dado & 0xf0); 
0182:  MOVF   19,W
0184:  ANDLW  F0
0186:  MOVWF  1A
....................      PORTB = temp; 
0188:  MOVFF  1A,F81
....................      PORTB |= set_bit0; 
018C:  BSF    F81.0
....................      delay_us(5); 
018E:  MOVLW  08
0190:  MOVWF  00
0192:  DECFSZ 00,F
0194:  BRA    0192
....................      PORTB &= clear_bit0; 
0196:  BCF    F81.0
.................... //   delay_us(50); 
....................      temp=(dado << 4); 
0198:  SWAPF  19,W
019A:  MOVWF  1A
019C:  MOVLW  F0
019E:  ANDWF  1A,F
....................      PORTB = temp; 
01A0:  MOVFF  1A,F81
....................      PORTB |= set_bit0; 
01A4:  BSF    F81.0
....................      delay_us(5); 
01A6:  MOVLW  08
01A8:  MOVWF  00
01AA:  DECFSZ 00,F
01AC:  BRA    01AA
....................      PORTB &= clear_bit0; 
01AE:  BCF    F81.0
....................      delay_us(50); 
01B0:  MOVLW  53
01B2:  MOVWF  00
01B4:  DECFSZ 00,F
01B6:  BRA    01B4
....................     } 
....................  
.................... } 
01B8:  RETLW  00
....................  
.................... #separate 
.................... void mostra(char dado) 
.................... { 
....................  display(1,dado); 
*
0366:  MOVLW  01
0368:  MOVWF  18
036A:  MOVFF  17,19
036E:  RCALL  013E
.................... } 
0370:  RETLW  00
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #IF !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #ENDIF 
....................  
.................... #IF defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #ENDIF 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #IF defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    int8  data1,data2; 
....................    #endif 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #IF !defined(__PCD__) 
....................      *((unsigned int8 *)(&y)) = 0x7E;  
.................... #ENDIF 
....................  
.................... #IF defined(__PCD__) // Takes care of IEEE format 
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
.................... #ENDIF 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #IF !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #ENDIF 
.................... #IF defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
.................... #ENDIF 
....................  
....................       if (n<0) 
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int8  data1,data2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int8  data1,data2; 
....................    signed n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................  *(((unsigned int8 *)(&y))+2) = data1; 
....................  
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................   
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
.................... { 
....................      bit_set(data1,0); 
.................... } 
....................     n = data1 - 0x7E; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(x>=0) 
....................      return(  exp(y*log(x)) ); 
....................    else 
....................      return(  -exp(y*log(-x)) ); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int8 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................    data1--; 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(___PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int8 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................    data1--; 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................       (*p)--; 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[4] = { 
....................       -0.499999993585, 
....................        0.041666636258, 
....................       -0.0013888361399, 
....................        0.00002476016134 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 3; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "ds1307.c" 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////////////////////  
.................... ///                               DS1307.C                                   ///  
.................... ///                     Driver for Real Time Clock                           ///  
.................... ///                                                                          ///  
.................... /// ds1307_init() - Enable oscillator without clearing the seconds register -///  
.................... ///                 used when PIC loses power and DS1307 run from 3V BAT     ///  
.................... ///               - Disable squarewave output                                ///  
.................... ///                                                                          ///  
.................... /// ds1307_set_date_time(day,mth,year,dow,hour,min,sec)  Set the date/time   ///  
.................... ///                                                                          ///  
.................... /// ds1307_get_date(day,mth,year,dow)               Get the date             ///  
.................... ///                                                                          ///  
.................... /// ds1307_get_time(hr,min,sec)                     Get the time             ///  
.................... ///                                                                          ///  
.................... ////////////////////////////////////////////////////////////////////////////////  
....................  
.................... #define RTC_SDA  PIN_C4  
.................... #define RTC_SCL  PIN_C3  
....................  
.................... #use i2c(master, sda=RTC_SDA, scl=RTC_SCL)  
....................  
.................... BYTE bin2bcd(BYTE binary_value);  
.................... BYTE bcd2bin(BYTE bcd_value);  
....................  
.................... void ds1307_init(void)  
.................... {  
....................    BYTE seconds = 0;  
....................  
....................    i2c_start();  
....................    i2c_write(0xD0);      // WR to RTC  
....................    i2c_write(0x00);      // REG 0  
....................    i2c_start();  
....................    i2c_write(0xD1);      // RD from RTC  
....................    seconds = bcd2bin(i2c_read(0)); // Read current "seconds" in DS1307  
....................    i2c_stop();  
....................    seconds &= 0x7F;  
....................  
....................    delay_us(3);  
....................  
....................    i2c_start();  
....................    i2c_write(0xD0);      // WR to RTC  
....................    i2c_write(0x00);      // REG 0  
....................    i2c_write(bin2bcd(seconds));     // Start oscillator with current "seconds value  
....................    i2c_start();  
....................    i2c_write(0xD0);      // WR to RTC  
....................    i2c_write(0x07);      // Control Register  
....................    i2c_write(0x80);     // Disable squarewave output pin  
....................    i2c_stop();  
....................  
.................... }  
....................  
.................... void ds1307_set_date_time(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min, BYTE sec)  
.................... {  
....................   sec &= 0x7F;  
....................   hr &= 0x3F;  
....................  
....................   i2c_start();  
....................   i2c_write(0xD0);            // I2C write address  
....................   i2c_write(0x00);            // Start at REG 0 - Seconds  
....................   i2c_write(bin2bcd(sec));      // REG 0  
....................   i2c_write(bin2bcd(min));      // REG 1  
....................   i2c_write(bin2bcd(hr));      // REG 2  
....................   i2c_write(bin2bcd(dow));      // REG 3  
....................   i2c_write(bin2bcd(day));      // REG 4  
....................   i2c_write(bin2bcd(mth));      // REG 5  
....................   i2c_write(bin2bcd(year));      // REG 6  
....................   i2c_write(0x80);            // REG 7 - Disable squarewave output pin  
....................   i2c_stop();  
.................... }  
....................  
.................... void ds1307_get_date(BYTE &day, BYTE &mth, BYTE &year, BYTE &dow)  
.................... {  
....................   i2c_start();  
....................   i2c_write(0xD0);  
....................   i2c_write(0x03);            // Start at REG 3 - Day of week  
....................   i2c_start();  
....................   i2c_write(0xD1);  
....................   dow  = bcd2bin(i2c_read() & 0x7f);   // REG 3  
....................   day  = bcd2bin(i2c_read() & 0x3f);   // REG 4  
....................   mth  = bcd2bin(i2c_read() & 0x1f);   // REG 5  
....................   year = bcd2bin(i2c_read(0));            // REG 6  
....................   i2c_stop();  
.................... }  
....................  
.................... void ds1307_get_time(BYTE &hr, BYTE &min, BYTE &sec)  
.................... {  
....................   i2c_start();  
....................   i2c_write(0xD0);  
....................   i2c_write(0x00);            // Start at REG 0 - Seconds  
....................   i2c_start();  
....................   i2c_write(0xD1);  
....................   sec = bcd2bin(i2c_read() & 0x7f);  
....................   min = bcd2bin(i2c_read() & 0x7f);  
....................   hr  = bcd2bin(i2c_read(0) & 0x3f);  
....................   i2c_stop();  
....................  
.................... }  
....................  
.................... BYTE bin2bcd(BYTE binary_value)  
.................... {  
....................   BYTE temp;  
....................   BYTE retval;  
....................  
....................   temp = binary_value;  
....................   retval = 0;  
....................  
....................   while(1)  
....................   {  
....................     // Get the tens digit by doing multiple subtraction  
....................     // of 10 from the binary value.  
....................     if(temp >= 10)  
....................     {  
....................       temp -= 10;  
....................       retval += 0x10;  
....................     }  
....................     else // Get the ones digit by adding the remainder.  
....................     {  
....................       retval += temp;  
....................       break;  
....................     }  
....................   }  
....................  
....................   return(retval);  
.................... }  
....................  
....................  
.................... // Input range - 00 to 99.  
.................... BYTE bcd2bin(BYTE bcd_value)  
.................... {  
....................   BYTE temp;  
....................  
....................   temp = bcd_value;  
....................   // Shifting upper digit right by 1 is same as multiplying by 8.  
....................   temp >>= 1;  
....................   // Isolate the bits for the upper digit.  
....................   temp &= 0x78;  
....................  
....................   // Now return: (Tens * 8) + (Tens * 2) + Ones  
....................  
....................   return(temp + (temp >> 2) + (bcd_value & 0x0f));  
.................... }  
....................  
.................... //------------------------------------------------------------------------ 
.................... // Read one byte at the specified address. 
.................... // This function is used to access the control byte 
.................... // or the NVRAM bytes. 
....................  
.................... char ds1307_read_byte(char addr) 
.................... { 
.................... char retval; 
....................  
.................... disable_interrupts(GLOBAL); 
.................... i2c_start(); 
.................... i2c_write(0xD0); 
.................... i2c_write(addr); 
....................  
.................... i2c_start(); 
.................... i2c_write(0xD1); 
.................... retval = i2c_read(0);   // Don't ACK the last byte read 
.................... i2c_stop(); 
.................... enable_interrupts(GLOBAL); 
....................  
.................... return(retval); 
.................... } 
....................  
....................  
....................  
.................... #define TECLA_SET    !input(PIN_D0) 
.................... #define TECLA_MAIS   !input(PIN_D3) 
.................... #define TECLA_MENOS  !input(PIN_D2) 
....................  
.................... #define SAIDA01 PIN_D1 
....................  
.................... #define DEBOUNCE 100 
....................  
.................... long int tecla_menos_tempo = DEBOUNCE; 
.................... long int tecla_mais_tempo = DEBOUNCE; 
.................... long int tecla_set_tempo = DEBOUNCE; 
....................  
.................... int1 tecla_menos_status = false; 
.................... int1 tecla_mais_status = false; 
.................... int1 tecla_set_status = false; 
....................  
.................... int1 tecla_menos_state = false; 
.................... int1 tecla_mais_state = false; 
.................... int1 tecla_set_state = false; 
....................  
.................... verifica_teclas() { 
....................  
....................   if(TECLA_SET){ 
*
0262:  BSF    F95.0
0264:  BTFSC  F83.0
0266:  BRA    0278
....................     if(tecla_set_tempo == DEBOUNCE){ 
0268:  MOVF   09,W
026A:  SUBLW  64
026C:  BNZ   0276
026E:  MOVF   0A,F
0270:  BNZ   0276
....................       tecla_set_status = true; 
0272:  BSF    0B.2
....................       tecla_set_state = true; 
0274:  BSF    0B.5
....................     }     
....................   } else { 
0276:  BRA    0282
....................     if(!tecla_set_state){       
0278:  BTFSC  0B.5
027A:  BRA    0282
....................       tecla_set_tempo = DEBOUNCE; 
027C:  CLRF   0A
027E:  MOVLW  64
0280:  MOVWF  09
....................     } 
....................   } 
....................  
....................   if(tecla_set_state){ 
0282:  BTFSS  0B.5
0284:  BRA    02AA
....................     if(tecla_set_tempo > 1){ 
0286:  MOVF   0A,F
0288:  BNZ   0290
028A:  MOVF   09,W
028C:  SUBLW  01
028E:  BC    029A
....................       tecla_set_tempo--; 
0290:  MOVF   09,W
0292:  BTFSC  FD8.2
0294:  DECF   0A,F
0296:  DECF   09,F
....................     } else { 
0298:  BRA    029E
....................       tecla_set_tempo = 0; 
029A:  CLRF   0A
029C:  CLRF   09
....................     } 
....................     if(tecla_set_tempo < 1){ 
029E:  MOVF   09,F
02A0:  BNZ   02AA
02A2:  MOVF   0A,F
02A4:  BNZ   02AA
....................       tecla_set_status = false; 
02A6:  BCF    0B.2
....................       tecla_set_state = false; 
02A8:  BCF    0B.5
....................     } 
....................   } 
....................  
....................   if(TECLA_MAIS){ 
02AA:  BSF    F95.3
02AC:  BTFSC  F83.3
02AE:  BRA    02C0
....................     if(tecla_mais_tempo == DEBOUNCE){ 
02B0:  MOVF   07,W
02B2:  SUBLW  64
02B4:  BNZ   02BE
02B6:  MOVF   08,F
02B8:  BNZ   02BE
....................       tecla_mais_status = true; 
02BA:  BSF    0B.1
....................       tecla_mais_state = true; 
02BC:  BSF    0B.4
....................     }     
....................   } else { 
02BE:  BRA    02CA
....................     if(!tecla_mais_state){       
02C0:  BTFSC  0B.4
02C2:  BRA    02CA
....................       tecla_mais_tempo = DEBOUNCE; 
02C4:  CLRF   08
02C6:  MOVLW  64
02C8:  MOVWF  07
....................     } 
....................   } 
....................  
....................   if(tecla_mais_state){ 
02CA:  BTFSS  0B.4
02CC:  BRA    02F2
....................     if(tecla_mais_tempo > 1){ 
02CE:  MOVF   08,F
02D0:  BNZ   02D8
02D2:  MOVF   07,W
02D4:  SUBLW  01
02D6:  BC    02E2
....................       tecla_mais_tempo--; 
02D8:  MOVF   07,W
02DA:  BTFSC  FD8.2
02DC:  DECF   08,F
02DE:  DECF   07,F
....................     } else { 
02E0:  BRA    02E6
....................       tecla_mais_tempo = 0; 
02E2:  CLRF   08
02E4:  CLRF   07
....................     } 
....................     if(tecla_mais_tempo < 1){ 
02E6:  MOVF   07,F
02E8:  BNZ   02F2
02EA:  MOVF   08,F
02EC:  BNZ   02F2
....................       tecla_mais_status = false; 
02EE:  BCF    0B.1
....................       tecla_mais_state = false; 
02F0:  BCF    0B.4
....................     } 
....................   } 
....................  
....................   if(TECLA_MENOS){ 
02F2:  BSF    F95.2
02F4:  BTFSC  F83.2
02F6:  BRA    0308
....................     if(tecla_menos_tempo == DEBOUNCE){ 
02F8:  MOVF   05,W
02FA:  SUBLW  64
02FC:  BNZ   0306
02FE:  MOVF   06,F
0300:  BNZ   0306
....................       tecla_menos_status = true; 
0302:  BSF    0B.0
....................       tecla_menos_state = true; 
0304:  BSF    0B.3
....................     }     
....................   } else { 
0306:  BRA    0312
....................     if(!tecla_menos_state){       
0308:  BTFSC  0B.3
030A:  BRA    0312
....................       tecla_menos_tempo = DEBOUNCE; 
030C:  CLRF   06
030E:  MOVLW  64
0310:  MOVWF  05
....................     } 
....................   } 
....................  
....................   if(tecla_menos_state){ 
0312:  BTFSS  0B.3
0314:  BRA    033A
....................     if(tecla_menos_tempo > 1){ 
0316:  MOVF   06,F
0318:  BNZ   0320
031A:  MOVF   05,W
031C:  SUBLW  01
031E:  BC    032A
....................       tecla_menos_tempo--; 
0320:  MOVF   05,W
0322:  BTFSC  FD8.2
0324:  DECF   06,F
0326:  DECF   05,F
....................     } else { 
0328:  BRA    032E
....................       tecla_menos_tempo = 0; 
032A:  CLRF   06
032C:  CLRF   05
....................     } 
....................     if(tecla_menos_tempo < 1){ 
032E:  MOVF   05,F
0330:  BNZ   033A
0332:  MOVF   06,F
0334:  BNZ   033A
....................       tecla_menos_status = false; 
0336:  BCF    0B.0
....................       tecla_menos_state = false; 
0338:  BCF    0B.3
....................     } 
....................   } 
.................... } 
033A:  GOTO   0552 (RETURN)
....................  
.................... main() 
.................... {  
*
0524:  CLRF   FF8
0526:  BCF    FD0.7
0528:  CLRF   FEA
052A:  CLRF   FE9
052C:  BSF    FC1.0
052E:  BSF    FC1.1
0530:  BSF    FC1.2
0532:  BCF    FC1.3
0534:  MOVLW  64
0536:  MOVWF  05
0538:  CLRF   06
053A:  MOVWF  07
053C:  CLRF   08
053E:  MOVWF  09
0540:  CLRF   0A
0542:  BCF    0B.0
0544:  BCF    0B.1
0546:  BCF    0B.2
0548:  BCF    0B.3
054A:  BCF    0B.4
054C:  BCF    0B.5
....................  
.................... //inicializa o display LCD 
....................   inic_display(); 
054E:  BRA    01BA
....................  
....................   while (true) 
....................   { 
....................     verifica_teclas(); 
0550:  BRA    0262
....................  
....................   display(0,0x80); 
0552:  CLRF   18
0554:  MOVLW  80
0556:  MOVWF  19
0558:  RCALL  013E
.................... //imprime na tela a temperatura 
....................   printf(mostra,"%d", tecla_mais_state); 
055A:  MOVLW  00
055C:  BTFSC  0B.4
055E:  MOVLW  01
0560:  MOVWF  11
0562:  MOVLW  1F
0564:  MOVWF  12
0566:  RCALL  0372
....................  
....................  
....................           //envia o cursor do LCD para a posicao 0,0 
....................   display(0,0xC0); 
0568:  CLRF   18
056A:  MOVLW  C0
056C:  MOVWF  19
056E:  RCALL  013E
.................... //imprime na tela a temperatura 
....................   printf(mostra,"TS:%d T-:%d T+:%d   ", tecla_set_status, tecla_menos_status, tecla_mais_status); 
0570:  MOVLW  00
0572:  BTFSC  0B.2
0574:  MOVLW  01
0576:  MOVWF  0C
0578:  MOVLW  00
057A:  BTFSC  0B.0
057C:  MOVLW  01
057E:  MOVWF  0D
0580:  MOVLW  00
0582:  BTFSC  0B.1
0584:  MOVLW  01
0586:  MOVWF  0E
0588:  MOVLW  54
058A:  MOVWF  17
058C:  RCALL  0366
058E:  MOVLW  53
0590:  MOVWF  17
0592:  RCALL  0366
0594:  MOVLW  3A
0596:  MOVWF  17
0598:  RCALL  0366
059A:  MOVFF  0C,11
059E:  MOVLW  1F
05A0:  MOVWF  12
05A2:  RCALL  0372
05A4:  MOVLW  05
05A6:  MOVWF  0F
05A8:  MOVF   0F,W
05AA:  RCALL  0004
05AC:  INCF   0F,F
05AE:  MOVWF  00
05B0:  MOVWF  17
05B2:  RCALL  0366
05B4:  MOVLW  09
05B6:  SUBWF  0F,W
05B8:  BNZ   05A8
05BA:  MOVFF  0D,11
05BE:  MOVLW  1F
05C0:  MOVWF  12
05C2:  RCALL  0372
05C4:  MOVLW  0B
05C6:  MOVWF  10
05C8:  MOVF   10,W
05CA:  RCALL  0004
05CC:  INCF   10,F
05CE:  MOVWF  00
05D0:  MOVWF  17
05D2:  RCALL  0366
05D4:  MOVLW  0F
05D6:  SUBWF  10,W
05D8:  BNZ   05C8
05DA:  MOVFF  0E,11
05DE:  MOVLW  1F
05E0:  MOVWF  12
05E2:  RCALL  0372
05E4:  MOVLW  20
05E6:  MOVWF  17
05E8:  RCALL  0366
05EA:  MOVLW  20
05EC:  MOVWF  17
05EE:  RCALL  0366
05F0:  MOVLW  20
05F2:  MOVWF  17
05F4:  RCALL  0366
....................             //envia o cursor do LCD para a posicao 0,0 
....................   display(0,0x94); 
05F6:  CLRF   18
05F8:  MOVLW  94
05FA:  MOVWF  19
05FC:  RCALL  013E
.................... //imprime na tela a temperatura 
....................   printf(mostra,"tS:%ld t-:%ld t+:%ld   ", tecla_set_tempo, tecla_menos_tempo, tecla_mais_tempo); 
05FE:  MOVLW  74
0600:  MOVWF  17
0602:  RCALL  0366
0604:  MOVLW  53
0606:  MOVWF  17
0608:  RCALL  0366
060A:  MOVLW  3A
060C:  MOVWF  17
060E:  RCALL  0366
0610:  MOVLW  10
0612:  MOVWF  FE9
0614:  MOVFF  0A,0F
0618:  MOVFF  09,0E
061C:  RCALL  043A
061E:  MOVLW  06
0620:  MOVWF  0C
0622:  MOVF   0C,W
0624:  RCALL  002A
0626:  INCF   0C,F
0628:  MOVWF  00
062A:  MOVWF  17
062C:  RCALL  0366
062E:  MOVLW  0A
0630:  SUBWF  0C,W
0632:  BNZ   0622
0634:  MOVLW  10
0636:  MOVWF  FE9
0638:  MOVFF  06,0F
063C:  MOVFF  05,0E
0640:  RCALL  043A
0642:  MOVLW  0D
0644:  MOVWF  0D
0646:  MOVF   0D,W
0648:  RCALL  002A
064A:  INCF   0D,F
064C:  MOVWF  00
064E:  MOVWF  17
0650:  RCALL  0366
0652:  MOVLW  11
0654:  SUBWF  0D,W
0656:  BNZ   0646
0658:  MOVLW  10
065A:  MOVWF  FE9
065C:  MOVFF  08,0F
0660:  MOVFF  07,0E
0664:  RCALL  043A
0666:  MOVLW  20
0668:  MOVWF  17
066A:  RCALL  0366
066C:  MOVLW  20
066E:  MOVWF  17
0670:  RCALL  0366
0672:  MOVLW  20
0674:  MOVWF  17
0676:  RCALL  0366
....................  
....................   if(tecla_menos_status && tecla_mais_status){ 
0678:  BTFSS  0B.0
067A:  BRA    069C
067C:  BTFSS  0B.1
067E:  BRA    069C
....................       display(0,0xD4); 
0680:  CLRF   18
0682:  MOVLW  D4
0684:  MOVWF  19
0686:  RCALL  013E
....................       //imprime na tela a temperatura 
....................       printf(mostra,"+ -   "); 
0688:  CLRF   0C
068A:  MOVF   0C,W
068C:  RCALL  0052
068E:  INCF   0C,F
0690:  MOVWF  00
0692:  MOVWF  17
0694:  RCALL  0366
0696:  MOVLW  06
0698:  SUBWF  0C,W
069A:  BNZ   068A
....................   } 
....................  
....................   if(tecla_set_status && tecla_mais_status){ 
069C:  BTFSS  0B.2
069E:  BRA    06C0
06A0:  BTFSS  0B.1
06A2:  BRA    06C0
....................       display(0,0xD4); 
06A4:  CLRF   18
06A6:  MOVLW  D4
06A8:  MOVWF  19
06AA:  RCALL  013E
....................       //imprime na tela a temperatura 
....................       printf(mostra,"set +   "); 
06AC:  CLRF   0C
06AE:  MOVF   0C,W
06B0:  RCALL  006A
06B2:  INCF   0C,F
06B4:  MOVWF  00
06B6:  MOVWF  17
06B8:  RCALL  0366
06BA:  MOVLW  08
06BC:  SUBWF  0C,W
06BE:  BNZ   06AE
....................   } 
....................  
....................   if(tecla_menos_status && tecla_set_status){ 
06C0:  BTFSS  0B.0
06C2:  BRA    06E4
06C4:  BTFSS  0B.2
06C6:  BRA    06E4
....................       display(0,0xD4); 
06C8:  CLRF   18
06CA:  MOVLW  D4
06CC:  MOVWF  19
06CE:  RCALL  013E
....................       //imprime na tela a temperatura 
....................       printf(mostra,"set -   "); 
06D0:  CLRF   0C
06D2:  MOVF   0C,W
06D4:  RCALL  0084
06D6:  INCF   0C,F
06D8:  MOVWF  00
06DA:  MOVWF  17
06DC:  RCALL  0366
06DE:  MOVLW  08
06E0:  SUBWF  0C,W
06E2:  BNZ   06D2
....................   } 
....................  
....................   if(!tecla_menos_status && !tecla_set_status && !tecla_mais_status){ 
06E4:  BTFSC  0B.0
06E6:  BRA    070C
06E8:  BTFSC  0B.2
06EA:  BRA    070C
06EC:  BTFSC  0B.1
06EE:  BRA    070C
....................       display(0,0xD4); 
06F0:  CLRF   18
06F2:  MOVLW  D4
06F4:  MOVWF  19
06F6:  RCALL  013E
....................       //imprime na tela a temperatura 
....................       printf(mostra,"nada      "); 
06F8:  CLRF   0C
06FA:  MOVF   0C,W
06FC:  RCALL  009E
06FE:  INCF   0C,F
0700:  MOVWF  00
0702:  MOVWF  17
0704:  RCALL  0366
0706:  MOVLW  0A
0708:  SUBWF  0C,W
070A:  BNZ   06FA
....................   } 
....................  
....................   if(tecla_menos_status && !tecla_set_status && !tecla_mais_status){ 
070C:  BTFSS  0B.0
070E:  BRA    0734
0710:  BTFSC  0B.2
0712:  BRA    0734
0714:  BTFSC  0B.1
0716:  BRA    0734
....................       display(0,0xD4); 
0718:  CLRF   18
071A:  MOVLW  D4
071C:  MOVWF  19
071E:  RCALL  013E
....................       //imprime na tela a temperatura 
....................       printf(mostra,"-   "); 
0720:  CLRF   0C
0722:  MOVF   0C,W
0724:  RCALL  00BA
0726:  INCF   0C,F
0728:  MOVWF  00
072A:  MOVWF  17
072C:  RCALL  0366
072E:  MOVLW  04
0730:  SUBWF  0C,W
0732:  BNZ   0722
....................   } 
....................  
....................   if(tecla_mais_status && !tecla_set_status && !tecla_menos_status){ 
0734:  BTFSS  0B.1
0736:  BRA    075C
0738:  BTFSC  0B.2
073A:  BRA    075C
073C:  BTFSC  0B.0
073E:  BRA    075C
....................       display(0,0xD4); 
0740:  CLRF   18
0742:  MOVLW  D4
0744:  MOVWF  19
0746:  RCALL  013E
....................       //imprime na tela a temperatura 
....................       printf(mostra,"+   "); 
0748:  CLRF   0C
074A:  MOVF   0C,W
074C:  RCALL  00D0
074E:  INCF   0C,F
0750:  MOVWF  00
0752:  MOVWF  17
0754:  RCALL  0366
0756:  MOVLW  04
0758:  SUBWF  0C,W
075A:  BNZ   074A
....................   } 
....................  
....................   if(tecla_set_status && !tecla_menos_status && !tecla_mais_status){ 
075C:  BTFSS  0B.2
075E:  BRA    0784
0760:  BTFSC  0B.0
0762:  BRA    0784
0764:  BTFSC  0B.1
0766:  BRA    0784
....................       display(0,0xD4); 
0768:  CLRF   18
076A:  MOVLW  D4
076C:  MOVWF  19
076E:  RCALL  013E
....................       //imprime na tela a temperatura 
....................       printf(mostra,"set   "); 
0770:  CLRF   0C
0772:  MOVF   0C,W
0774:  RCALL  00E6
0776:  INCF   0C,F
0778:  MOVWF  00
077A:  MOVWF  17
077C:  RCALL  0366
077E:  MOVLW  06
0780:  SUBWF  0C,W
0782:  BNZ   0772
....................   } 
....................      
....................  
.................... //alterna o estado do pino D4 
....................     //output_toggle(PIN_D1); 
....................  
.................... //aguarda 500ms 
....................     delay_ms (1); 
0784:  MOVLW  01
0786:  MOVWF  0C
0788:  RCALL  00FE
....................   } 
078A:  BRA    0550
.................... } 
....................  
078C:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   BROWNOUT WDT128 NOWDT BORV20 PUT
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NODEBUG NOLVP
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTB NOWRTC
   Word  7: 400F   NOEBTR NOEBTRB
